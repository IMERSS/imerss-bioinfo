"use strict";fluid.registerNamespace("fluid.colour"),fluid.colour.hexIndirect={3:"001122",4:"00112233",6:"012345",8:"01234567"},fluid.colour.hexToArray=function(hex){"#"!==hex.charAt(0)&&fluid.fail("hex colour must begin with # - "+hex),hex=hex.substring(1);const digits=fluid.transform(hex.split(""),(function(ch){return parseInt(ch,16)})),indirect=fluid.colour.hexIndirect[hex.length];indirect||fluid.fail("Unsupported number of hex digits in "+hex+": can only supply "+Object.keys(fluid.colour.hexIndirect).join(", ")+" digits");const array=[];for(let i=0;i<indirect.length;i+=2){const colour=(16*digits[indirect[i]]+digits[indirect[i+1]])/(6===i?255:1);array.push(colour)}return array},fluid.colour.arrayToString=function(array){return(3===array.length?"rgb(":"rgba(")+array.join(", ")+")"},fluid.colour.interpolate=function(f,c1,c2){return fluid.transform([(1-f)*c1[0]+f*c2[0],(1-f)*c1[1]+f*c2[1],(1-f)*c1[2]+f*c2[2]],Math.round)},fluid.colour.interpolateStops=function(stops,value){const binIndex=stops.findIndex((stop=>value<=stop[0])),bin=stops[binIndex];if(-1===binIndex)return stops[stops.length-1][1];if(0===binIndex)return bin[1];const lowerStop=stops[binIndex-1],upperStop=bin,t=(value-lowerStop[0])/(upperStop[0]-lowerStop[0]),interpolatedColor=fluid.colour.interpolate(t,fluid.colour.hexToArray(lowerStop[1]),fluid.colour.hexToArray(upperStop[1]));return fluid.colour.arrayToString(interpolatedColor)},fluid.colour.average=function(ca){return ca.reduce((function(total,c){return total[0]+=c[0],total[1]+=c[1],total[2]+=c[2],total}),[0,0,0]).map((function(e){return e/ca.length}))},fluid.colour.rgbToHsl=function(c){const r=c[0]/255,g=c[1]/255,b=c[2]/255,max=Math.max(r,g,b),min=Math.min(r,g,b);let h,s,l=(max+min)/2;if(max===min)h=s=0;else{const d=max-min;s=l>.5?d/(2-max-min):d/(max+min),h=max===r?(g-b)/d+(g<b?6:0):max===g?(b-r)/d+2:(r-g)/d+4,h/=6}return[h,s,l]},fluid.colour.hue2rgb=function(p,q,t){return t<0?t+=1:t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+(q-p)*(2/3-t)*6:p},fluid.colour.hslToRgb=function(hsl){const h=hsl[0],s=hsl[1],l=hsl[2];let r,g,b;if(0===s)r=g=b=l;else{const q=l<.5?l*(1+s):l+s-l*s,p=2*l-q;r=fluid.colour.hue2rgb(p,q,h+1/3),g=fluid.colour.hue2rgb(p,q,h),b=fluid.colour.hue2rgb(p,q,h-1/3)}return[Math.round(255*r),Math.round(255*g),Math.round(255*b)]},(hortis=fluid.registerNamespace("hortis")).encodeHTML=function(str){return str.replace(/[&<>'"]/g,(function(tag){return{"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"}[tag]}))},hortis.renderSVGElement=function(markup,parentContainer){const element=$.parseXML(markup).documentElement;return parentContainer.append(element),element},hortis.renderNumber=function(number){return Math.abs(number)<1e-5?"0":number.toFixed(3)},hortis.emitPath=function(elements){let togo="";return elements.forEach((function(elem){togo+="string"==typeof elem?elem:hortis.renderNumber(elem)})),togo},hortis.circularPath=function(radius){const r=radius;return hortis.emitPath(["M",-r," ",0,"A",r," ",r," 0 1 0 ",r," ",0,"A",r," ",r," 0 1 0 ",-r," ",0])},hortis.annularPath=function(innerRadius,outerRadius){const ir=innerRadius,or=outerRadius;return hortis.emitPath(["M",-or," ",0,"A",or," ",or," 0 1 0 ",or," ",0,"A",or," ",or," 0 1 0 ",-or," ",0,"Z","M",-ir," ",0,"A",ir," ",ir," 0 1 1 ",ir," ",0,"A",ir," ",ir," 0 1 1 ",-ir," ",0,"Z"])},hortis.segmentPath=function(startAngle,endAngle,innerRadius,outerRadius){const cs=Math.cos(startAngle),ss=-Math.sin(startAngle),ce=Math.cos(endAngle),se=-Math.sin(endAngle),i=innerRadius,o=outerRadius,lfa=(+(endAngle-startAngle>=Math.PI)).toString();return hortis.emitPath(["M",cs*i," ",ss*i,"A",i," ",i," 0 ",lfa," 0 ",ce*i," ",se*i,"L",ce*o," ",se*o,"A",o," ",o," 0 ",lfa," 1 ",cs*o," ",ss*o,"Z"])},hortis.linearTextPath=function(leftAngle,rightAngle,innerRadius,outerRadius){const midAngle=(leftAngle+rightAngle)/2,c=Math.cos(midAngle),s=-Math.sin(midAngle),sr=c>0?innerRadius:outerRadius,fr=c>0?outerRadius:innerRadius;return hortis.emitPath(["M",c*sr," ",s*sr,"L",c*fr," ",s*fr])},hortis.segmentTextPath=function(startAngle,endAngle,outerRadius){const cs=Math.cos(startAngle),ss=-Math.sin(startAngle),ce=Math.cos(endAngle),se=-Math.sin(endAngle),ar=outerRadius-20,lfa=(+(endAngle-startAngle>=Math.PI)).toString();return hortis.emitPath(["M",cs*ar," ",ss*ar,"A",ar," ",ar," 0 ",lfa," 0 ",ce*ar," ",se*ar])},hortis.circularTextPath=function(outerRadius){const ar=outerRadius-20;return hortis.emitPath(["M","-0.1 ",-ar,"A",ar," ",ar," 0 1 0 ","0.1 ",-ar])};var hortis=fluid.registerNamespace("hortis");fluid.defaults("hortis.csvReader",{gradeNames:"fluid.component",members:{completionPromise:"@expand:fluid.promise()"},csvOptions:{header:!0,skipEmptyLines:!0},events:{},listeners:{"onCreate.parse":"hortis.csvReader.parse({that}, {that}.options.csvOptions, {that}.options.url)"}}),hortis.csvReader.parse=function(that,csvOptions,url){const options={...csvOptions,complete:function(results){that.parsed=results,that.data=results.data,that.headers=results.meta.fields,that.completionPromise.resolve(!0)},error:function(err){that.completionPromise.reject(),fluid.fail("Error parsing CSV file ",url,": ",err)}};Papa.parse(url,options)},fluid.defaults("hortis.urlCsvReader",{gradeNames:"hortis.csvReader",csvOptions:{download:!0}}),fluid.defaults("hortis.vizLoader",{gradeNames:["fluid.resourceLoader"],components:{taxaLoader:{type:"hortis.urlCsvReader",options:{url:"{vizLoader}.options.taxaFile"}},obsLoader:{type:"hortis.urlCsvReader",options:{url:"{vizLoader}.options.obsFile"}},taxa:{type:"hortis.taxa",createOnEvent:"onResourcesLoaded",options:{members:{rows:"{taxaLoader}.data"}}}},events:{obsFilterChange:null},model:{},invokers:{filterEntries:"fluid.identity"},members:{obsFilter:fluid.identity},resources:{taxa:{promiseFunc:"fluid.identity",promiseArgs:"{that}.taxaLoader.completionPromise"},obs:{promiseFunc:"fluid.identity",promiseArgs:"{that}.obsLoader.completionPromise"}}}),hortis.taxonTooltipTemplate='<div class="fl-imerss-tooltip">\n    <div class="fl-imerss-photo" style="background-image: url(%imgUrl)"></div>\n    <div class="fl-text"><b>%taxonRank:</b> %taxonNames</div>\n</div>',hortis.capitalize=function(string){return string.charAt(0).toUpperCase()+string.slice(1)},hortis.renderTaxonTooltip=function(that,hoverId){const row=that.entryById[hoverId].row,terms={imgUrl:row.iNaturalistTaxonImage||""};row.rank?terms.taxonRank=hortis.capitalize(row.rank):terms.taxonRank="Species";const names=[row.taxonName||row.iNaturalistTaxonName,row.commonName,row.hulqName].filter((name=>name));return terms.taxonNames=names.join(" / "),fluid.stringTemplate(hortis.taxonTooltipTemplate,terms)},hortis.isInDocument=function(node){const dokkument=fluid.getDocument(node),container=node[0];return $.contains(dokkument,container)||dokkument===container},hortis.clearAllTooltips=function(that){hortis.clearTooltip(that),$(".ui-tooltip").remove(),that.applier.change(that.options.tooltipKey,null)},hortis.clearTooltip=function(that){const tooltipTarget=that.tooltipTarget;tooltipTarget&&(that.tooltipTarget=null,hortis.isInDocument(tooltipTarget)?tooltipTarget.tooltip("destroy"):hortis.clearAllTooltips(that))},hortis.updateTooltip=function(that,id){const content=id?that.renderTooltip(id):null;if(hortis.clearTooltip(that),content){const target=$(that.hoverEvent.target);target.tooltip({items:target}),target.tooltip("option","content",content||""),target.tooltip("option","track",!0),target.tooltip("open",that.hoverEvent),that.tooltipTarget=target}else that.hoverEvent=null},fluid.defaults("hortis.taxa",{gradeNames:"fluid.component",members:{rowById:"@expand:hortis.indexTree({that}.rows)",flatTree:"@expand:hortis.taxa.map({that}.rows, {that}.rowById)",entries:"@expand:hortis.computeEntries({that}.flatTree, {that}.acceptRow)",entryById:"@expand:hortis.indexEntries({that}.entries)"},invokers:{acceptRow:"hortis.acceptRow({that}, {arguments}.0)"}}),hortis.acceptRow=function(){return!0},fluid.defaults("hortis.beaVizLoader",{selectors:{interactions:".fl-imerss-interactions-holder"},components:{pollinatorChecklist:{type:"hortis.checklist.withHolder",createOnEvent:"onResourcesLoaded",container:".fl-imerss-pollinators",options:{gradeNames:"hortis.checklist.inLoader",rootId:1,filterRanks:["order","family"],members:{entryById:"{taxa}.entryById"}}},plantChecklist:{type:"hortis.checklist.withHolder",createOnEvent:"onResourcesLoaded",container:".fl-imerss-plants",options:{gradeNames:"hortis.checklist.inLoader",rootId:47126,filterRanks:["class","order","family","kingdom"],members:{entryById:"{taxa}.entryById"}}},interactions:{type:"hortis.interactions",createOnEvent:"onResourcesLoaded",options:{model:{plantSelection:"{plantChecklist}.model.rowSelection",pollinatorSelection:"{pollinatorChecklist}.model.rowSelection"}}},drawInteractions:{type:"hortis.drawInteractions",createOnEvent:"onResourcesLoaded",container:"{that}.dom.interactions",options:{components:{interactions:"{interactions}",taxa:"{taxa}"}}}},listeners:{"onResourcesLoaded.makeObsFilter":{funcName:"hortis.makeBeaObsFilter",args:["{that}"],priority:"after:fluid-componentConstruction"}}}),fluid.defaults("hortis.checklist.inLoader",{modelListeners:{obsFilterChange:{path:"{that}.model.rowSelection",func:"{vizLoader}.events.obsFilterChange.fire",excludeSource:"init"}}}),hortis.makeBeaObsFilter=function(beaVizLoader){const plantChecklist=beaVizLoader.plantChecklist,pollinatorChecklist=beaVizLoader.pollinatorChecklist;beaVizLoader.obsFilter=function(obsRow){return plantChecklist.model.rowSelection[obsRow.plantINatId]&&pollinatorChecklist.model.rowSelection[obsRow.pollinatorINatId]}},hortis.bindTaxonHover=function(that,layoutHolder){const hoverable=that.options.selectors.hoverable;that.container.on("mouseenter",hoverable,(function(e){const id=this.dataset.rowId;layoutHolder.hoverEvent=e,layoutHolder.applier.change("hoverId",id)})),that.container.on("mouseleave",hoverable,(function(){layoutHolder.applier.change("hoverId",null)})),that.container.on("click",hoverable,(function(){const id=this.dataset.rowId;layoutHolder.events.changeLayoutId.fire(id)}))},hortis.computeEntries=function(rows,acceptRow){const togo=[];return fluid.each(rows,(function(row){if(acceptRow(row))togo.push({row:row,children:hortis.computeEntries(row.children,acceptRow)});else{const dChildren=hortis.computeEntries(row.children,acceptRow);Array.prototype.push.apply(togo,dChildren)}})),hortis.sortChecklistLevel(togo)},hortis.indexEntries=function(entries){const index={};return entries.forEach((function(entry){index[entry.row.id]=entry})),index},hortis.indexTree=function(flatTree){const index={};return flatTree.forEach((function(row){index[row.id]=row})),index},hortis.taxa.map=function(rows,byId){rows.forEach(((row,i)=>{if(row.flatIndex=i,row.children=[],row.parentId){const parent=byId[row.parentId];row.parent=parent,fluid.pushArray(parent,"children",row)}}));const assignDepth=function(node,depth){node.depth=depth,node.children.forEach((child=>assignDepth(child,depth+1)))};return assignDepth(rows[0],0),rows},fluid.defaults("hortis.layoutHolder",{gradeNames:"fluid.modelComponent",tooltipKey:"hoverId",members:{taxonHistory:[]},events:{changeLayoutId:null},model:{rowFocus:{},rowSelection:{},layoutId:"{that}.options.rootId",selectedId:null,hoverId:null,historyIndex:0},modelListeners:{hoverId:{excludeSource:"init",funcName:"hortis.updateTooltip",args:["{that}","{change}.value"]}},modelRelay:{isAtRoot:{target:"isAtRoot",args:["{that}.model.layoutId","{that}.options.rootId"],func:(x,y)=>x===y}},invokers:{renderTooltip:"hortis.renderTaxonTooltip({that}, {arguments}.0)",filterEntries:"fluid.notImplemented"}}),fluid.defaults("hortis.vizLoaderWithMap",{gradeNames:["fluid.viewComponent","hortis.vizLoader"],selectors:{map:".fld-imerss-map"},components:{map:{type:"hortis.libreMap",container:"{that}.dom.map",createOnEvent:"onResourcesLoaded",options:{gradeNames:"{vizLoader}.options.mapGrades"}}}}),hortis.projectBounds={Galiano:[[48.855,-123.65],[49.005,-123.25]],Valdes:[[49,-123.798],[49.144,-123.504]],Xetthecum:[[48.93713,-123.511],[48.9511,-123.498]],Pepiowelh:[[48.565,-123.1575],[48.598,-123.1266]],HoweSound:[[49.16,-124.281],[50.17,-122.05]],SalishSea:[[47.568,-124.2],[49.134,-122.059]]},hortis.initBounds=function(bounds){bounds[0]=[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],bounds[1]=[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]},hortis.updateBounds=function(bounds,lat,long){bounds[0][0]=Math.min(bounds[0][0],lat),bounds[0][1]=Math.min(bounds[0][1],long),bounds[1][0]=Math.max(bounds[1][0],lat),bounds[1][1]=Math.max(bounds[1][1],long)},hortis.expandBounds=function(bounds,factor){const he=(bounds[1][1]-bounds[0][1])*factor,ve=(bounds[1][0]-bounds[0][0])*factor;bounds[0][0]-=ve,bounds[0][1]-=he,bounds[1][0]+=ve,bounds[1][1]+=he},fluid.defaults("hortis.libreMap",{gradeNames:"fluid.viewComponent",mapOptions:{style:{version:8,layers:[],sources:{}}},members:{map:"@expand:hortis.libreMap.make({that}.container.0, {that}.options.mapOptions, {that}.events.loadMap)"},model:{mapLoaded:"{that}.resources.mapLoaded.parsed"},resources:{mapLoaded:{promiseFunc:"fluid.identity",promiseArgs:"{that}.events.loadMap"}},events:{buildMap:null,loadMap:"promise"},listeners:{"loadMap.build":"{that}.events.buildMap.fire","buildMap.fitBounds":"hortis.libreMap.fitBounds({that}, {that}.options.fitBounds)","buildMap.addTiles":"hortis.libreMap.addTileLayers({that}.map, {that}.options.tileSets)"}}),hortis.libreMap.make=function(container,mapOptions,loadEvent){const togo=new maplibregl.Map({container:container,...mapOptions});return togo.on("load",(function(){console.log("Map loaded"),loadEvent.fire(!0)})),togo},fluid.defaults("hortis.libreMap.streetmapTiles",{tileSets:{baseMap:{tiles:["https://tile.openstreetmap.org/{z}/{x}/{y}.png"],attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',tileSize:256}}}),fluid.defaults("hortis.libreMap.usEcoL3Tiles",{tileSets:{ecoL3:{tiles:["https://usda-nifa-b-team.github.io/b-team/tiles/us_eco_l3_tiles/{z}/{x}/{y}.png"],tileSize:512,maxzoom:8,paint:{"raster-opacity":.5}}}}),hortis.libreMap.addTileLayers=function(map,tileSets){Object.keys(tileSets).reverse().forEach((function(key){const tileSet=tileSets[key],paint=tileSet.paint||{};map.addSource(key,{type:"raster",...fluid.censorKeys(tileSet,["paint"])}),map.addLayer({id:key,type:"raster",source:key,paint:paint})}))},hortis.libreMap.viridisStops=[[0,"#440154"],[.2,"#414487"],[.4,"#2a788e"],[.6,"#22a884"],[.8,"#7ad151"],[1,"#fde725"]],hortis.libreMap.natureStops=[[0,"#ffffff"],[1,"#09326d"]],fluid.defaults("hortis.libreMap.withObsGrid",{modelListeners:{"{obsQuantiser}.model.indexVersion":{func:"{that}.updateObsGrid",excludeSource:"init"}},fillStops:hortis.libreMap.viridisStops,fillOpacity:.7,outlineColour:"black",invokers:{addObsGrid:{funcName:"hortis.libreMap.addObsGrid",args:["{that}","{obsQuantiser}"]},updateObsGrid:{funcName:"hortis.libreMap.updateObsGrid",args:["{that}","{obsQuantiser}"]}},listeners:{"buildMap.addObsGrid":"{that}.addObsGrid","buildMap.fitBounds":"hortis.libreMap.fitBounds({that}, {obsQuantiser}.grid.bounds)"}}),hortis.libreMap.rectFromCorner=function(lat,long,latres,longres){return[[long,lat],[long+longres,lat],[long+longres,lat+latres],[long,lat+latres],[long,lat]]},hortis.libreMap.obsGridFeature=function(map,obsQuantiser){const grid=obsQuantiser.grid,buckets=grid.buckets,latres=obsQuantiser.model.latResolution,longres=obsQuantiser.model.longResolution;return{type:"FeatureCollection",features:Object.entries(buckets).map((function([key,bucket]){const[lat,long]=hortis.obsQuantiser.indexToCoord(key,latres,longres);return{type:"Feature",geometry:{type:"Polygon",coordinates:[hortis.libreMap.rectFromCorner(lat,long,latres,longres)]},properties:{obsprop:bucket.count/grid.maxCount}}}))}},hortis.libreMap.addObsGrid=function(map,obsQuantiser){const geojson=hortis.libreMap.obsGridFeature(map,obsQuantiser);map.map.addSource("obsgrid-source",{type:"geojson",data:geojson});const layer={id:"obsgrid-layer",type:"fill",source:"obsgrid-source",paint:{"fill-color":{property:"obsprop",stops:map.options.fillStops},"fill-opacity":map.options.fillOpacity,"fill-outline-color":map.options.outlineColour}};map.map.addLayer(layer)},hortis.libreMap.updateObsGrid=function(map,obsQuantiser){const geojson=hortis.libreMap.obsGridFeature(map,obsQuantiser),source=map.map.getSource("obsgrid-source");source&&source.setData(geojson)},hortis.libreMap.swapCoords=function(coords){return[coords[1],coords[0]]},hortis.libreMap.swapBounds=function(bounds){return bounds.map(hortis.libreMap.swapCoords)},hortis.libreMap.fitBounds=function(that,fitBounds){const swapped=hortis.libreMap.swapBounds(fitBounds);that.map.fitBounds(swapped)},fluid.defaults("hortis.interactions",{gradeNames:"fluid.modelComponent",members:{crossTable:"@expand:hortis.interactions.count({that}, {obsLoader})",plantTable:{},pollTable:{}}}),hortis.intIdsToKey=function(plantId,pollId){return plantId+"|"+pollId},hortis.keyToIntIds=function(key){const parts=key.split("|");return{plantId:+parts[0],pollId:+parts[1]}},hortis.addCount=function(table,key,count=1){void 0===table[key]&&(table[key]=0),table[key]+=count},hortis.max=function(hash){let max=Number.NEGATIVE_INFINITY;return fluid.each(hash,(function(val){max=Math.max(val,max)})),max},hortis.maxReducer=function(){const togo={value:Number.NEGATIVE_INFINITY,reduce:next=>{togo.value=Math.max(next,togo.value)}};return togo},hortis.minReducer=function(){const togo={value:Number.POSITIVE_INFINITY,reduce:next=>{togo.value=Math.min(next,togo.value)}};return togo},hortis.interactions.count=function(that,obsLoader){const rows=obsLoader.data,{plantTable:plantTable,pollTable:pollTable}=that,crossTable={};rows.forEach((function(row){const{pollinatorINatId:pollId,plantINatId:plantId}=row;if(plantId&&pollId){const key=hortis.intIdsToKey(plantId,pollId);hortis.addCount(crossTable,key),hortis.addCount(plantTable,plantId),hortis.addCount(pollTable,pollId)}}));const cells=Object.keys(crossTable).length,plants=Object.keys(plantTable).length,polls=Object.keys(pollTable).length;return console.log("Counted ",rows.length+" obs into "+cells+" cells for "+plants+" plants and "+polls+" pollinators"),console.log("Occupancy: "+(cells/(plants*polls)*100).toFixed(2)+"%"),crossTable},fluid.defaults("hortis.drawInteractions",{gradeNames:"fluid.viewComponent",tooltipKey:"hoverCellKey",selectors:{plantNames:".fld-imerss-plant-names",plantCounts:".fld-imerss-plant-counts",pollNames:".fld-imerss-poll-names",pollCounts:".fld-imerss-poll-counts",interactions:".fld-imerss-interactions",scroll:".fld-imerss-int-scroll",hoverable:".fl-imerss-int-label"},squareSize:16,squareMargin:2,fillStops:hortis.libreMap.natureStops,fillOpacity:.7,outlineColour:"black",listeners:{"onCreate.bindEvents":"hortis.drawInteractions.bindEvents","onCreate.bindTaxonHover":"hortis.bindTaxonHover({that}, {layoutHolder})"},invokers:{renderTooltip:"hortis.renderInteractionTooltip({that}, {arguments}.0)"},model:{hoverCellKey:null},modelListeners:{render:{path:"{interactions}.model",func:"hortis.drawInteractions.render",args:["{that}"]},hover:{path:"hoverCellKey",excludeSource:"init",funcName:"hortis.updateTooltip",args:["{that}","{change}.value"]}},components:{pollTooltips:{container:"{that}.dom.pollCounts",type:"hortis.histoTooltips",options:{counts:"pollCounts"}},plantTooltips:{container:"{that}.dom.plantCounts",type:"hortis.histoTooltips",options:{counts:"plantCounts"}}}}),fluid.defaults("hortis.histoTooltips",{gradeNames:"fluid.viewComponent",tooltipKey:"hoverId",selectors:{hoverable:".fl-imerss-int-count"},model:{hoverId:null},modelListeners:{hover:{path:"hoverId",excludeSource:"init",funcName:"hortis.updateTooltip",args:["{that}","{change}.value"]}},invokers:{renderTooltip:"hortis.renderHistoTooltip({that}, {arguments}.0, {drawInteractions})"},listeners:{"onCreate.bindHistoHover":"hortis.bindHistoHover"}}),hortis.bindHistoHover=function(that){const hoverable=that.options.selectors.hoverable;that.container.on("mouseenter",hoverable,(function(e){const id=this.dataset.rowId;that.hoverEvent=e,that.applier.change("hoverId",id)})),that.container.on("mouseleave",hoverable,(function(){that.applier.change("hoverId",null)}))},hortis.renderHistoTooltip=function(that,id,interactions){const count=interactions[that.options.counts].counts[id];return`<div class="fl-imerss-int-tooltip"><div><i>${interactions.taxa.rowById[id].iNaturalistTaxonName}</i>:</div><div>Observation count: ${count}</div></div>`},hortis.makePerm=function(table){return Object.entries(table).map(((entry,index)=>({id:entry[0],count:entry[1],index:index})))},hortis.drawInteractions.render=function(that){const{crossTable:crossTable,plantTable:plantTable,pollTable:pollTable}=that.interactions,{squareSize:squareSize,squareMargin:squareMargin}=that.options,plantSelection=that.interactions.model.plantSelection,filteredPlant=plantSelection?fluid.filterKeys(plantTable,Object.keys(plantSelection)):plantTable,plantPerm=hortis.makePerm(filteredPlant),pollSelection=that.interactions.model.pollinatorSelection,filteredPoll=pollSelection?fluid.filterKeys(pollTable,Object.keys(pollSelection)):pollTable,pollPerm=hortis.makePerm(filteredPoll),canvas=that.locate("interactions")[0],ctx=canvas.getContext("2d"),side=squareSize-2*squareMargin;ctx.lineWidth=10;const plantCounts={counts:{},max:0},pollCounts={counts:{},max:0};plantPerm.forEach((function(plantRec){const plantId=plantRec.id;pollPerm.forEach((function(pollRec){const pollId=pollRec.id,key=hortis.intIdsToKey(plantId,pollId),count=crossTable[key];void 0!==count&&(hortis.addCount(plantCounts.counts,plantId,count),hortis.addCount(pollCounts.counts,pollId,count))}))})),plantCounts.max=hortis.max(plantCounts.counts),pollCounts.max=hortis.max(pollCounts.counts);const filterZero=function(perm,counts){fluid.remove_if(perm,(rec=>void 0===counts[rec.id])),perm.sort(((ea,eb)=>counts[eb.id]-counts[ea.id]))},filterCutoff=function(perm,counts,sizeLimit,countLimit){if(perm.length>=sizeLimit){const cutIndex=perm.findIndex((entry=>counts[entry.id]<countLimit));-1!==cutIndex&&(perm.length=cutIndex)}};filterZero(plantPerm,plantCounts.counts),filterZero(pollPerm,pollCounts.counts),filterCutoff(plantPerm,plantCounts.counts,100,8),filterCutoff(pollPerm,pollCounts.counts,100,8),that.plantPerm=plantPerm,that.pollPerm=pollPerm,that.plantCounts=plantCounts,that.pollCounts=pollCounts;const cellTable=[],cellMax=hortis.maxReducer(),cellMin=hortis.minReducer();plantPerm.forEach((function(plantRec,plantIndex){const plantId=plantRec.id;pollPerm.forEach((function(pollRec,pollIndex){const pollId=pollRec.id,key=hortis.intIdsToKey(plantId,pollId),count=crossTable[key];if(void 0!==count){const scaled=count/Math.sqrt(plantCounts.counts[plantId]*pollCounts.counts[pollId]);cellMax.reduce(scaled),cellMin.reduce(scaled),cellTable.push({scaled:scaled,plantIndex:plantIndex,pollIndex:pollIndex})}}))}));const width=pollPerm.length*squareSize+2*squareMargin,height=plantPerm.length*squareSize+2*squareMargin;canvas.width=width,canvas.height=height,ctx.fillStyle="white",ctx.fillRect(0,0,width,height);const xPos=index=>index*squareSize+squareMargin,yPos=index=>index*squareSize+squareMargin;cellTable.forEach((function(cell){const{scaled:scaled,plantIndex:plantIndex,pollIndex:pollIndex}=cell,prop=(scaled-cellMin.value)/(cellMax.value-cellMin.value),colour=fluid.colour.interpolateStops(that.options.fillStops,prop),xywh=[xPos(pollIndex),yPos(plantIndex),side,side];ctx.fillStyle=colour,ctx.fillRect.apply(ctx,xywh),ctx.strokeStyle=that.options.outlineColour,ctx.strokeRect.apply(ctx,xywh)}));const plantNames=that.locate("plantNames")[0];plantNames.style.height=height;const plantMark=plantPerm.map((function(rec,plantIndex){const plantId=rec.id,row=that.taxa.rowById[plantId];return`<div class="fl-imerss-int-label" data-row-id="${plantId}" style="top: ${yPos(plantIndex)+0}px">${row.iNaturalistTaxonName}</div>`}));plantNames.innerHTML=plantMark.join("\n");const plantCountNode=that.locate("plantCounts")[0];plantCountNode.style.height=height;const plantCountMark=plantPerm.map((function(rec,plantIndex){const plantId=rec.id,count=plantCounts.counts[plantId],prop=fluid.roundToDecimal(95.83333333333334*count/plantCounts.max,2);return`<div class="fl-imerss-int-count" data-row-id="${plantId}" style="top: ${yPos(plantIndex)+0}px; width: ${prop}%; height: ${side}px;"></div>`}));plantCountNode.innerHTML=plantCountMark.join("\n");const pollNames=that.locate("pollNames")[0];pollNames.style.width=width;const pollMark=pollPerm.map((function(rec,pollIndex){const pollId=rec.id,row=that.taxa.rowById[pollId];return`<div class="fl-imerss-int-label" data-row-id="${pollId}" style="left: ${xPos(pollIndex)+-.75}px">${row.iNaturalistTaxonName}</div>`}));pollNames.innerHTML=pollMark.join("\n");const pollCountNode=that.locate("pollCounts")[0];pollCountNode.style.width=`${width}px`;const pollCountMark=pollPerm.map((function(rec,pollIndex){const pollId=rec.id,count=pollCounts.counts[pollId],prop=fluid.roundToDecimal(95.83333333333334*count/pollCounts.max,2);return`<div class="fl-imerss-int-count" data-row-id="${pollId}" style="left: ${xPos(pollIndex)+-.75}px; height: ${prop}%; width: ${side}px;"></div>`}));pollCountNode.innerHTML=pollCountMark.join("\n")},hortis.interactionTooltipTemplate='<div class="fl-imerss-tooltip">\n    <div class="fl-imerss-photo" style="background-image: url(%imgUrl)"></div>" +\n    <div class="fl-text"><b>%taxonRank:</b> %taxonNames</div>" +\n    </div>',hortis.renderInteractionTooltip=function(that,cellKey){const{plantId:plantId,pollId:pollId}=hortis.keyToIntIds(cellKey),plantName=that.taxa.rowById[plantId].iNaturalistTaxonName;return`<div class="fl-imerss-int-tooltip"><div><i>${that.taxa.rowById[pollId].iNaturalistTaxonName}</i> on </div><div><i>${plantName}</i>:</div><div>Count: ${that.interactions.crossTable[cellKey]}</div></div>`},hortis.drawInteractions.bindEvents=function(that){const crossTable=that.interactions.crossTable,plantNames=that.locate("plantNames")[0],plantCounts=that.locate("plantCounts")[0],pollNames=that.locate("pollNames")[0],pollCounts=that.locate("pollCounts")[0],scroll=that.locate("scroll")[0];scroll.addEventListener("scroll",(function(){const scrollTop=scroll.scrollTop;plantNames.scrollTop=scrollTop,plantCounts.scrollTop=scrollTop;const scrollLeft=scroll.scrollLeft;pollNames.scrollLeft=scrollLeft,pollCounts.scrollLeft=scrollLeft})),plantNames.addEventListener("scroll",(function(){scroll.scrollTop=plantNames.scrollTop}));const canvas=that.locate("interactions")[0],{squareSize:squareSize,squareMargin:squareMargin}=that.options,buff=squareMargin/squareSize;canvas.addEventListener("mousemove",(function(e){const xc=e.offsetX/squareSize,yc=e.offsetY/squareSize,xb=xc%1,yb=yc%1;if(xb>=buff&&xb<=1-buff&&yb>=buff&&yb<=1-buff){const pollId=that.pollPerm?.[Math.floor(xc)]?.id,plantId=that.plantPerm?.[Math.floor(yc)]?.id,key=hortis.intIdsToKey(plantId,pollId),crossCount=crossTable[key];that.hoverEvent=e,that.applier.change("hoverCellKey",crossCount?key:null)}else that.applier.change("hoverCellKey",null)})),canvas.addEventListener("mouseleave",(()=>that.applier.change("hoverCellKey",null)))},hortis.WGS84a=6378137,hortis.WGS84b=6356752.3142,hortis.WGS84e2=(hortis.WGS84a*hortis.WGS84a-hortis.WGS84b*hortis.WGS84b)/(hortis.WGS84a*hortis.WGS84a),hortis.longitudeLength=function(latitude){const latrad=Math.PI*latitude/180,sinrad=Math.sin(latrad);return Math.PI*hortis.WGS84a*Math.cos(latrad)/(180*Math.sqrt(1-hortis.WGS84e2*sinrad*sinrad))},hortis.latitudeLength=function(latitude){const latrad=Math.PI*latitude/180,sinrad=Math.sin(latrad);return Math.PI*hortis.WGS84a*(1-hortis.WGS84e2)/(180*Math.pow(1-hortis.WGS84e2*sinrad*sinrad,1.5))},hortis.longToLat=function(lng,lat){return lng*hortis.longitudeLength(lat)/hortis.latitudeLength(lat)},fluid.defaults("hortis.obsQuantiser",{gradeNames:"fluid.modelComponent",baseLatitude:37.5,model:{longResolution:.005,indexVersion:0},modelRelay:{latResolution:{target:"latResolution",func:"hortis.longToLat",args:["{that}.model.longResolution","{that}.options.baseLatitude"]},index:{target:"indexVersion",func:"hortis.obsQuantiser.indexObs",args:["{that}","{obsLoader}","{that}.model.latResolution","{that}.model.longResolution","{vizLoader}","{that}.model.indexVersion"]}},members:{grid:{}},events:{indexUpdated:null}}),hortis.obsQuantiser.initGrid=function(grid){grid.bounds=[],grid.maxCount=0,grid.buckets={}},hortis.obsQuantiser.indexToCoord=function(index,latres,longres){const coords=index.split("|");return[coords[0]*latres,coords[1]*longres]},hortis.obsQuantiser.coordToIndex=function(lat,long,latres,longres){return Math.floor(lat/latres)+"|"+Math.floor(long/longres)},hortis.obsQuantiser.indexObs=function(that,obsLoader,latResolution,longResolution,obsFilterHolder,indexVersion){const grid=that.grid;hortis.obsQuantiser.initGrid(grid);const now=Date.now(),rows=obsLoader.data.length,obsFilter=obsFilterHolder.obsFilter;hortis.initBounds(grid.bounds),obsLoader.data.forEach((function(row,index){if(obsFilter(row)){const coordIndex=hortis.obsQuantiser.coordToIndex(row.decimalLatitude,row.decimalLongitude,latResolution,longResolution);hortis.updateBounds(grid.bounds,row.decimalLatitude,row.decimalLongitude);let bucket=grid.buckets[coordIndex];bucket||(bucket=grid.buckets[coordIndex]={count:0,byTaxonId:{},plantByTaxonId:{}}),bucket.count++,grid.maxCount=Math.max(grid.maxCount,bucket.count),fluid.pushArray(bucket.byTaxonId,row.pollinatorINatId,index),fluid.pushArray(bucket.plantByTaxonId,row.plantINatId,index)}})),hortis.expandBounds(grid.bounds,.1);const delay=Date.now()-now;return console.log(rows+" rows in "+delay+" ms: "+delay/rows*1e3+" us/row"),indexVersion+1},hortis.increment=function(that,path){const value=fluid.get(that.model,path);that.applier.change(path,value+1)},fluid.defaults("hortis.libreObsMap",{gradeNames:["hortis.libreMap","hortis.libreMap.withObsGrid"],components:{quantiser:{type:"hortis.obsQuantiser",options:{listeners:{"{vizLoader}.events.obsFilterChange":{namespace:"indexObs",func:"hortis.increment",args:["{that}","indexVersion"]}},model:{longResolution:.075}}}}}),fluid.defaults("hortis.demoLibreMap",{gradeNames:["hortis.libreObsMap","hortis.libreMap.streetmapTiles","hortis.libreMap.usEcoL3Tiles"]});hortis=fluid.registerNamespace("hortis");fluid.defaults("hortis.autocomplete",{gradeNames:["fluid.newViewComponent"],listeners:{"onCreate.render":"hortis.autocomplete.render"},events:{onConfirm:null},maxSuggestions:20,invokers:{query:"hortis.autocomplete.emptyQuery",renderSuggestion:"fluid.identity",renderInputValue:"fluid.identity"},widgetOptions:{displayMenu:"overlay"}}),hortis.autocomplete.emptyQuery=function(query,callback){callback("")},hortis.autocomplete.render=function(that){const widgetOptions=$.extend({element:that.container[0],id:that.options.id,source:that.query,templates:{suggestion:that.renderSuggestion,inputValue:that.renderInputValue},onConfirm:that.events.onConfirm.fire},that.options.widgetOptions);that.widget=accessibleAutocomplete(widgetOptions),$("input",that.container).attr("spellcheck",!1)};hortis=fluid.registerNamespace("hortis");fluid.defaults("hortis.tabs",{gradeNames:["fluid.viewComponent"],tabOptions:{},model:{selectedTab:null},listeners:{"onCreate.initTabs":{this:"{that}.container",method:"tabs",args:"{that}.options.tabOptions"},"onCreate.bindEvents":{funcName:"hortis.tabs.bindEvents"}}}),hortis.tabs.findTab=function(that,tabId){return fluid.find(that.options.tabIds,(function(id,key){return id===tabId?key:void 0}))},hortis.tabs.bindEvents=function(that){that.container.on("tabsactivate",(function(event,ui){const tabId=ui.newTab.find("a").attr("href").substring(1),tab=hortis.tabs.findTab(that,tabId);that.applier.change("selectedTab",tab)}));const initialIndex=Object.keys(that.options.tabIds).indexOf(that.model.selectedTab);-1!==initialIndex&&that.container.tabs("option","active",initialIndex)},(hortis=fluid.registerNamespace("hortis")).sppAnnotations=["agg.","aff.","s.lat.","cf","sp.nov.","var.","sp.","ssp.","spp.","complex"],hortis.annoteRegex=new RegExp("("+hortis.sppAnnotations.map((annot=>annot.replace(".","\\."))).join("|")+")","g"),hortis.renderSpeciesName=function(name){return name.replace(hortis.annoteRegex,'<span class="flc-checklist-annote">$1</span>')},hortis.checklistCheckbox=function(rowid){return`\n    <span class="pretty p-icon">\n      <input type="checkbox" class="flc-checklist-check" ${rowid}/>\n      <span class="state p-success">\n        <i class="icon mdi mdi-check"></i>\n        <label></label>\n      </span>\n    </span>`},hortis.checklistItem=function(entry,selectedId,simple,selectable){const record=entry.row,rowid=' data-row-id="'+record.id+'"',rank=!record.rank||simple&&record.taxonName?"species":record.rank,header="<li "+("species"===rank&&record.id===selectedId?' class="fl-checklist-selected"':"")+">";let name="<p "+rowid+' class="flc-checklist-rank-'+rank+'">'+("species"===rank?hortis.renderSpeciesName:fluid.identity)(hortis.encodeHTML(hortis.rowToScientific(record)))+"</p>";record.commonName&&(name+=" - <p "+rowid+' class="flc-checklist-common-name">'+record.commonName+"</p>"),record.hulqName&&(name+=" - <p "+rowid+' class="flc-checklist-hulq-name"><em>'+record.hulqName+"</em></p>");const subList=hortis.checklistList(entry.children,selectedId,simple,selectable);return header+(selectable?hortis.checklistCheckbox(rowid):"")+name+subList+"</li>"},hortis.checklistList=function(entries,selectedId,simple,selectable){return entries.length?"<ul>"+entries.map((function(entry){return hortis.checklistItem(entry,selectedId,simple,selectable)})).join("")+"</ul>":""},hortis.checklistRowForId=function(that,id){return that.container.find("[data-row-id="+id+"]").closest("li")},hortis.updateChecklistSelection=function(that,newSelectedId,oldSelectedId,entryById){if(null===newSelectedId)return;hortis.checklistRowForId(that,oldSelectedId).removeClass("fl-checklist-selected");const row=entryById[newSelectedId].row;if(row&&row.species){hortis.checklistRowForId(that,newSelectedId).addClass("fl-checklist-selected")}},hortis.alwaysRejectRanks=["subfamily","tribe","genus"],hortis.acceptChecklistRow=function(row,filterRanks){const acceptBasic=!filterRanks||filterRanks.includes(row.rank)||row.species,alwaysReject=hortis.alwaysRejectRanks.includes(row.rank),rejectSpecies="species"===row.rank&&row.children.length>0,acceptChecklist=row.taxonName;return acceptBasic&&!rejectSpecies&&!alwaysReject||acceptChecklist},hortis.rowToScientific=function(row){return row.taxonName||row.iNaturalistTaxonName},hortis.scientificComparator=function(entrya,entryb){return hortis.rowToScientific(entrya.row)>hortis.rowToScientific(entryb.row)?1:-1},hortis.sortChecklistLevel=function(entries){return entries.sort(hortis.scientificComparator)},hortis.filterRanks=function(rows,filterRanks,showRoot,depth){const togo=[];return fluid.each(rows,(function(row){if(hortis.acceptChecklistRow(row,filterRanks)||0===depth&&showRoot)togo.push({row:row,children:hortis.filterRanks(row.children,filterRanks,depth+1)});else{const dChildren=hortis.filterRanks(row.children,filterRanks,depth+1);Array.prototype.push.apply(togo,dChildren)}})),hortis.sortChecklistLevel(togo)},hortis.SELECTED=1,hortis.UNSELECTED=0,hortis.INDETERMINATE=-1,fluid.defaults("hortis.checklist",{gradeNames:["hortis.withPanelLabel","fluid.viewComponent"],filterRanks:!1,showRoot:!1,selectors:{hoverable:"p",checklist:".fld-imerss-checklist"},invokers:{generateChecklist:{funcName:"hortis.checklist.generate",args:["{that}","{that}.dom.checklist","{layoutHolder}","{that}.options.filterRanks","{that}.options.showRoot"]},check:"hortis.checklist.check({that}, {arguments}.0, {arguments}.1)"},modelListeners:{updateSelected:{path:["{layoutHolder}.model.selectedId"],args:["{that}","{change}.value","{change}.oldValue","{layoutHolder}.entryById"],func:"hortis.updateChecklistSelection"},generateChecklist:{path:["{layoutHolder}.model.layoutId","{layoutHolder}.model.rowFocus"],func:"{that}.generateChecklist"},modelToCheck:{path:"idToState.*",func:"hortis.checklist.stateToCheck",args:["{that}","{change}.value","{change}.path"]}},listeners:{"onCreate.bindTaxonHover":"hortis.bindTaxonHover({that}, {layoutHolder})","onCreate.bindClick":"hortis.checklist.bindClick({that})"}}),hortis.checklist.bindClick=function(checklist){checklist.container.on("click",".pretty input",(function(){const id=this.dataset.rowId;console.log("Checkbox clicked with row "+id),checklist.check(id,this.checked)}))},hortis.checklist.stateToCheck=function(checklist,state,path){const id=fluid.peek(path),node=checklist.idToNode?.[id];if(node){node.checked=state===hortis.SELECTED,node.indeterminate=state===hortis.INDETERMINATE;const ui=node.closest(".p-icon").querySelector(".icon");$(ui).toggleClass("mdi-check",state!==hortis.INDETERMINATE)}},hortis.checklist.generate=function(that,element,layoutHolder,filterRanks,showRoot){const{entryById:entryById,filterEntries:filterEntries}=layoutHolder,{layoutId:rootId,selectedId:selectedId}=layoutHolder.model;console.log("Generating checklist for id "+rootId);const rootChildren=rootId?[entryById[rootId].row]:[],filteredEntries=filterEntries(hortis.filterRanks(rootChildren,filterRanks,showRoot,0));that.rootEntry={row:{},children:filteredEntries};const{idToEntry:idToEntry,allRowFocus:allRowFocus,model:model}=hortis.checklist.computeInitialModel(that.rootEntry);that.idToEntry=idToEntry,that.allRowFocus=allRowFocus,that.applier.change([],model);const markup=hortis.checklistList(filteredEntries,selectedId,filterRanks,!0);element[0].innerHTML=markup;const checks=element[0].querySelectorAll(".flc-checklist-check"),idToNode={};checks.forEach((check=>idToNode[check.dataset.rowId]=check)),that.idToNode=idToNode},hortis.checklist.allChildrenState=function(idToState,entry,state){return void 0===entry.children.find((child=>idToState[child.row.id]!==state))},hortis.checklist.check=function(checklist,id,checked){const idToStateUp={...checklist.model.idToState},upState=checked?hortis.SELECTED:hortis.UNSELECTED,entry=checklist.idToEntry[id],setChildState=function(entry,state){idToStateUp[entry.row.id]=state,entry.children.forEach((child=>setChildState(child,state)))};setChildState(entry,upState);let parent=entry.parent;for(;parent;){const allChildrenState=hortis.checklist.allChildrenState(idToStateUp,parent,upState);idToStateUp[parent.row.id]=allChildrenState?upState:hortis.INDETERMINATE,parent=parent.parent}checklist.applier.change(["idToState"],idToStateUp)},hortis.checklist.computeInitialModel=function(rootEntry){const idToState={},idToEntry={},allRowFocus={},indexEntry=function(entry,parent){idToState[entry.row.id]=hortis.UNSELECTED,idToEntry[entry.row.id]=entry,allRowFocus[entry.row.id]=!0,entry.parent=parent,entry.children.forEach((childEntry=>indexEntry(childEntry,entry)))};return indexEntry(rootEntry),{idToEntry:idToEntry,allRowFocus:allRowFocus,model:{idToState:idToState,selectedCount:0}}},fluid.defaults("hortis.checklist.withHolder",{gradeNames:["hortis.layoutHolder","hortis.checklist"],invokers:{filterEntries:"{vizLoader}.filterEntries"},modelListeners:{checklistSelection:{path:["{checklist}.model.idToState","{checklist}.model.rowFocus"],func:"hortis.checklist.checksToSelection",args:["{checklist}.model.idToState","{checklist}.model.rowFocus","{checklist}"],excludeSource:"init"}}}),hortis.checklist.checksToSelection=function(idToState,rowFocus,checklist){const selection={};let selected=0;fluid.each(idToState,((state,key)=>{state===hortis.SELECTED&&(++selected,selection[key]=!0)}));const anyRowFocus=!$.isEmptyObject(rowFocus),rowSelection=0===selected?anyRowFocus?{...rowFocus}:checklist.allRowFocus:selection;fluid.replaceModelValue(checklist.applier,"rowSelection",rowSelection)};
//# sourceMappingURL=imerss-viz-new.js.map