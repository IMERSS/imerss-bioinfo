!function(i,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((i||self).preactSignalsCore={})}(this,(function(i){function t(){throw new Error("Cycle detected")}var n=Symbol.for("preact-signals");function o(){if(!(s>1)){var i,t=!1;while(void 0!==h){var n=h;h=void 0;e++;while(void 0!==n){var o=n.o;n.o=void 0;n.f&=-3;if(!(8&n.f)&&c(n))try{n.c()}catch(n){if(!t){i=n;t=!0}}n=o}}e=0;s--;if(t)throw i}else s--}var r=void 0,f=0,h=void 0,s=0,e=0,v=0;function u(i){if(void 0!==r){var t=i.n;if(void 0===t||t.t!==r){t={i:0,S:i,p:r.s,n:void 0,t:r,e:void 0,x:void 0,r:t};if(void 0!==r.s)r.s.n=t;r.s=t;i.n=t;if(32&r.f)i.S(t);return t}else if(-1===t.i){t.i=0;if(void 0!==t.n){t.n.p=t.p;if(void 0!==t.p)t.p.n=t.n;t.p=r.s;t.n=void 0;r.s.n=t;r.s=t}return t}}}function d(i){this.v=i;this.i=0;this.n=void 0;this.t=void 0}d.prototype.brand=n;d.prototype.h=function(){return!0};d.prototype.S=function(i){if(this.t!==i&&void 0===i.e){i.x=this.t;if(void 0!==this.t)this.t.e=i;this.t=i}};d.prototype.U=function(i){if(void 0!==this.t){var t=i.e,n=i.x;if(void 0!==t){t.x=n;i.e=void 0}if(void 0!==n){n.e=t;i.x=void 0}if(i===this.t)this.t=n}};d.prototype.subscribe=function(i){var t=this;return _((function(){var n=t.value,o=32&this.f;this.f&=-33;try{i(n)}finally{this.f|=o}}))};d.prototype.valueOf=function(){return this.value};d.prototype.toString=function(){return this.value+""};d.prototype.toJSON=function(){return this.value};d.prototype.peek=function(){return this.v};Object.defineProperty(d.prototype,"value",{get:function(){var i=u(this);if(void 0!==i)i.i=this.i;return this.v},set:function(i){if(r instanceof y)!function(){throw new Error("Computed cannot have side-effects")}();if(i!==this.v){if(e>100)t();this.v=i;this.i++;v++;s++;try{for(var n=this.t;void 0!==n;n=n.x)n.t.N()}finally{o()}}}});function c(i){for(var t=i.s;void 0!==t;t=t.n)if(t.S.i!==t.i||!t.S.h()||t.S.i!==t.i)return!0;return!1}function a(i){for(var t=i.s;void 0!==t;t=t.n){var n=t.S.n;if(void 0!==n)t.r=n;t.S.n=t;t.i=-1;if(void 0===t.n){i.s=t;break}}}function l(i){var t=i.s,n=void 0;while(void 0!==t){var o=t.p;if(-1===t.i){t.S.U(t);if(void 0!==o)o.n=t.n;if(void 0!==t.n)t.n.p=o}else n=t;t.S.n=t.r;if(void 0!==t.r)t.r=void 0;t=o}i.s=n}function y(i){d.call(this,void 0);this.x=i;this.s=void 0;this.g=v-1;this.f=4}(y.prototype=new d).h=function(){this.f&=-3;if(1&this.f)return!1;if(32==(36&this.f))return!0;this.f&=-5;if(this.g===v)return!0;this.g=v;this.f|=1;if(this.i>0&&!c(this)){this.f&=-2;return!0}var i=r;try{a(this);r=this;var t=this.x();if(16&this.f||this.v!==t||0===this.i){this.v=t;this.f&=-17;this.i++}}catch(i){this.v=i;this.f|=16;this.i++}r=i;l(this);this.f&=-2;return!0};y.prototype.S=function(i){if(void 0===this.t){this.f|=36;for(var t=this.s;void 0!==t;t=t.n)t.S.S(t)}d.prototype.S.call(this,i)};y.prototype.U=function(i){if(void 0!==this.t){d.prototype.U.call(this,i);if(void 0===this.t){this.f&=-33;for(var t=this.s;void 0!==t;t=t.n)t.S.U(t)}}};y.prototype.N=function(){if(!(2&this.f)){this.f|=6;for(var i=this.t;void 0!==i;i=i.x)i.t.N()}};y.prototype.peek=function(){if(!this.h())t();if(16&this.f)throw this.v;return this.v};Object.defineProperty(y.prototype,"value",{get:function(){if(1&this.f)t();var i=u(this);this.h();if(void 0!==i)i.i=this.i;if(16&this.f)throw this.v;return this.v}});function w(i){var t=i.u;i.u=void 0;if("function"==typeof t){s++;var n=r;r=void 0;try{t()}catch(t){i.f&=-2;i.f|=8;p(i);throw t}finally{r=n;o()}}}function p(i){for(var t=i.s;void 0!==t;t=t.n)t.S.U(t);i.x=void 0;i.s=void 0;w(i)}function b(i){if(r!==this)throw new Error("Out-of-order effect");l(this);r=i;this.f&=-2;if(8&this.f)p(this);o()}function g(i){this.x=i;this.u=void 0;this.s=void 0;this.o=void 0;this.f=32}g.prototype.c=function(){var i=this.S();try{if(8&this.f)return;if(void 0===this.x)return;var t=this.x();if("function"==typeof t)this.u=t}finally{i()}};g.prototype.S=function(){if(1&this.f)t();this.f|=1;this.f&=-9;w(this);a(this);s++;var i=r;r=this;return b.bind(this,i)};g.prototype.N=function(){if(!(2&this.f)){this.f|=2;this.o=h;h=this}};g.prototype.d=function(){this.f|=8;if(!(1&this.f))p(this)};function _(i){var t=new g(i);try{t.c()}catch(i){t.d();throw i}return t.d.bind(t)}i.Signal=d;i.batch=function(i){if(s>0)return i();s++;try{return i()}finally{o()}};i.computed=function(i){return new y(i)};i.effect=_;i.signal=function(i){return new d(i)};i.untracked=function(i){if(f>0)return i();var t=r;r=void 0;f++;try{return i()}finally{f--;r=t}}}));
/*!
 * jQuery UI Tabs 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
(function(factory){"use strict";if(typeof define==="function"&&define.amd){define(["jquery","../keycode","../safe-active-element","../unique-id","../version","../widget"],factory)}else{factory(jQuery)}})((function($){"use strict";$.widget("ui.tabs",{version:"1.13.2",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:false,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var rhash=/#.*$/;return function(anchor){var anchorUrl,locationUrl;anchorUrl=anchor.href.replace(rhash,"");locationUrl=location.href.replace(rhash,"");try{anchorUrl=decodeURIComponent(anchorUrl)}catch(error){}try{locationUrl=decodeURIComponent(locationUrl)}catch(error){}return anchor.hash.length>1&&anchorUrl===locationUrl}}(),_create:function(){var that=this,options=this.options;this.running=false;this._addClass("ui-tabs","ui-widget ui-widget-content");this._toggleClass("ui-tabs-collapsible",null,options.collapsible);this._processTabs();options.active=this._initialActive();if(Array.isArray(options.disabled)){options.disabled=$.uniqueSort(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"),(function(li){return that.tabs.index(li)})))).sort()}if(this.options.active!==false&&this.anchors.length){this.active=this._findActive(options.active)}else{this.active=$()}this._refresh();if(this.active.length){this.load(options.active)}},_initialActive:function(){var active=this.options.active,collapsible=this.options.collapsible,locationHash=location.hash.substring(1);if(active===null){if(locationHash){this.tabs.each((function(i,tab){if($(tab).attr("aria-controls")===locationHash){active=i;return false}}))}if(active===null){active=this.tabs.index(this.tabs.filter(".ui-tabs-active"))}if(active===null||active===-1){active=this.tabs.length?0:false}}if(active!==false){active=this.tabs.index(this.tabs.eq(active));if(active===-1){active=collapsible?false:0}}if(!collapsible&&active===false&&this.anchors.length){active=0}return active},_getCreateEventData:function(){return{tab:this.active,panel:!this.active.length?$():this._getPanelForTab(this.active)}},_tabKeydown:function(event){var focusedTab=$($.ui.safeActiveElement(this.document[0])).closest("li"),selectedIndex=this.tabs.index(focusedTab),goingForward=true;if(this._handlePageNav(event)){return}switch(event.keyCode){case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:selectedIndex++;break;case $.ui.keyCode.UP:case $.ui.keyCode.LEFT:goingForward=false;selectedIndex--;break;case $.ui.keyCode.END:selectedIndex=this.anchors.length-1;break;case $.ui.keyCode.HOME:selectedIndex=0;break;case $.ui.keyCode.SPACE:event.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex);return;case $.ui.keyCode.ENTER:event.preventDefault();clearTimeout(this.activating);this._activate(selectedIndex===this.options.active?false:selectedIndex);return;default:return}event.preventDefault();clearTimeout(this.activating);selectedIndex=this._focusNextTab(selectedIndex,goingForward);if(!event.ctrlKey&&!event.metaKey){focusedTab.attr("aria-selected","false");this.tabs.eq(selectedIndex).attr("aria-selected","true");this.activating=this._delay((function(){this.option("active",selectedIndex)}),this.delay)}},_panelKeydown:function(event){if(this._handlePageNav(event)){return}if(event.ctrlKey&&event.keyCode===$.ui.keyCode.UP){event.preventDefault();this.active.trigger("focus")}},_handlePageNav:function(event){if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_UP){this._activate(this._focusNextTab(this.options.active-1,false));return true}if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_DOWN){this._activate(this._focusNextTab(this.options.active+1,true));return true}},_findNextTab:function(index,goingForward){var lastTabIndex=this.tabs.length-1;function constrain(){if(index>lastTabIndex){index=0}if(index<0){index=lastTabIndex}return index}while($.inArray(constrain(),this.options.disabled)!==-1){index=goingForward?index+1:index-1}return index},_focusNextTab:function(index,goingForward){index=this._findNextTab(index,goingForward);this.tabs.eq(index).trigger("focus");return index},_setOption:function(key,value){if(key==="active"){this._activate(value);return}this._super(key,value);if(key==="collapsible"){this._toggleClass("ui-tabs-collapsible",null,value);if(!value&&this.options.active===false){this._activate(0)}}if(key==="event"){this._setupEvents(value)}if(key==="heightStyle"){this._setupHeightStyle(value)}},_sanitizeSelector:function(hash){return hash?hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var options=this.options,lis=this.tablist.children(":has(a[href])");options.disabled=$.map(lis.filter(".ui-state-disabled"),(function(tab){return lis.index(tab)}));this._processTabs();if(options.active===false||!this.anchors.length){options.active=false;this.active=$()}else if(this.active.length&&!$.contains(this.tablist[0],this.active[0])){if(this.tabs.length===options.disabled.length){options.active=false;this.active=$()}else{this._activate(this._findNextTab(Math.max(0,options.active-1),false))}}else{options.active=this.tabs.index(this.active)}this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled);this._setupEvents(this.options.event);this._setupHeightStyle(this.options.heightStyle);this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1});this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"});if(!this.active.length){this.tabs.eq(0).attr("tabIndex",0)}else{this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0});this._addClass(this.active,"ui-tabs-active","ui-state-active");this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})}},_processTabs:function(){var that=this,prevTabs=this.tabs,prevAnchors=this.anchors,prevPanels=this.panels;this.tablist=this._getList().attr("role","tablist");this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header");this.tablist.on("mousedown"+this.eventNamespace,"> li",(function(event){if($(this).is(".ui-state-disabled")){event.preventDefault()}})).on("focus"+this.eventNamespace,".ui-tabs-anchor",(function(){if($(this).closest("li").is(".ui-state-disabled")){this.blur()}}));this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1});this._addClass(this.tabs,"ui-tabs-tab","ui-state-default");this.anchors=this.tabs.map((function(){return $("a",this)[0]})).attr({tabIndex:-1});this._addClass(this.anchors,"ui-tabs-anchor");this.panels=$();this.anchors.each((function(i,anchor){var selector,panel,panelId,anchorId=$(anchor).uniqueId().attr("id"),tab=$(anchor).closest("li"),originalAriaControls=tab.attr("aria-controls");if(that._isLocal(anchor)){selector=anchor.hash;panelId=selector.substring(1);panel=that.element.find(that._sanitizeSelector(selector))}else{panelId=tab.attr("aria-controls")||$({}).uniqueId()[0].id;selector="#"+panelId;panel=that.element.find(selector);if(!panel.length){panel=that._createPanel(panelId);panel.insertAfter(that.panels[i-1]||that.tablist)}panel.attr("aria-live","polite")}if(panel.length){that.panels=that.panels.add(panel)}if(originalAriaControls){tab.data("ui-tabs-aria-controls",originalAriaControls)}tab.attr({"aria-controls":panelId,"aria-labelledby":anchorId});panel.attr("aria-labelledby",anchorId)}));this.panels.attr("role","tabpanel");this._addClass(this.panels,"ui-tabs-panel","ui-widget-content");if(prevTabs){this._off(prevTabs.not(this.tabs));this._off(prevAnchors.not(this.anchors));this._off(prevPanels.not(this.panels))}},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(id){return $("<div>").attr("id",id).data("ui-tabs-destroy",true)},_setOptionDisabled:function(disabled){var currentItem,li,i;if(Array.isArray(disabled)){if(!disabled.length){disabled=false}else if(disabled.length===this.anchors.length){disabled=true}}for(i=0;li=this.tabs[i];i++){currentItem=$(li);if(disabled===true||$.inArray(i,disabled)!==-1){currentItem.attr("aria-disabled","true");this._addClass(currentItem,null,"ui-state-disabled")}else{currentItem.removeAttr("aria-disabled");this._removeClass(currentItem,null,"ui-state-disabled")}}this.options.disabled=disabled;this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,disabled===true)},_setupEvents:function(event){var events={};if(event){$.each(event.split(" "),(function(index,eventName){events[eventName]="_eventHandler"}))}this._off(this.anchors.add(this.tabs).add(this.panels));this._on(true,this.anchors,{click:function(event){event.preventDefault()}});this._on(this.anchors,events);this._on(this.tabs,{keydown:"_tabKeydown"});this._on(this.panels,{keydown:"_panelKeydown"});this._focusable(this.tabs);this._hoverable(this.tabs)},_setupHeightStyle:function(heightStyle){var maxHeight,parent=this.element.parent();if(heightStyle==="fill"){maxHeight=parent.height();maxHeight-=this.element.outerHeight()-this.element.height();this.element.siblings(":visible").each((function(){var elem=$(this),position=elem.css("position");if(position==="absolute"||position==="fixed"){return}maxHeight-=elem.outerHeight(true)}));this.element.children().not(this.panels).each((function(){maxHeight-=$(this).outerHeight(true)}));this.panels.each((function(){$(this).height(Math.max(0,maxHeight-$(this).innerHeight()+$(this).height()))})).css("overflow","auto")}else if(heightStyle==="auto"){maxHeight=0;this.panels.each((function(){maxHeight=Math.max(maxHeight,$(this).height("").height())})).height(maxHeight)}},_eventHandler:function(event){var options=this.options,active=this.active,anchor=$(event.currentTarget),tab=anchor.closest("li"),clickedIsActive=tab[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():this._getPanelForTab(tab),toHide=!active.length?$():this._getPanelForTab(active),eventData={oldTab:active,oldPanel:toHide,newTab:collapsing?$():tab,newPanel:toShow};event.preventDefault();if(tab.hasClass("ui-state-disabled")||tab.hasClass("ui-tabs-loading")||this.running||clickedIsActive&&!options.collapsible||this._trigger("beforeActivate",event,eventData)===false){return}options.active=collapsing?false:this.tabs.index(tab);this.active=clickedIsActive?$():tab;if(this.xhr){this.xhr.abort()}if(!toHide.length&&!toShow.length){$.error("jQuery UI Tabs: Mismatching fragment identifier.")}if(toShow.length){this.load(this.tabs.index(tab),event)}this._toggle(event,eventData)},_toggle:function(event,eventData){var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel;this.running=true;function complete(){that.running=false;that._trigger("activate",event,eventData)}function show(){that._addClass(eventData.newTab.closest("li"),"ui-tabs-active","ui-state-active");if(toShow.length&&that.options.show){that._show(toShow,that.options.show,complete)}else{toShow.css("display","block");complete()}}if(toHide.length&&this.options.hide){this._hide(toHide,this.options.hide,(function(){that._removeClass(eventData.oldTab.closest("li"),"ui-tabs-active","ui-state-active");show()}))}else{this._removeClass(eventData.oldTab.closest("li"),"ui-tabs-active","ui-state-active");toHide.css("display","none");show()}toHide.attr("aria-hidden","true");eventData.oldTab.attr({"aria-selected":"false","aria-expanded":"false"});if(toShow.length&&toHide.length){eventData.oldTab.attr("tabIndex",-1)}else if(toShow.length){this.tabs.filter((function(){return $(this).attr("tabIndex")===0})).attr("tabIndex",-1)}toShow.attr("aria-hidden","false");eventData.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(index){var anchor,active=this._findActive(index);if(active[0]===this.active[0]){return}if(!active.length){active=this.active}anchor=active.find(".ui-tabs-anchor")[0];this._eventHandler({target:anchor,currentTarget:anchor,preventDefault:$.noop})},_findActive:function(index){return index===false?$():this.tabs.eq(index)},_getIndex:function(index){if(typeof index==="string"){index=this.anchors.index(this.anchors.filter("[href$='"+$.escapeSelector(index)+"']"))}return index},_destroy:function(){if(this.xhr){this.xhr.abort()}this.tablist.removeAttr("role").off(this.eventNamespace);this.anchors.removeAttr("role tabIndex").removeUniqueId();this.tabs.add(this.panels).each((function(){if($.data(this,"ui-tabs-destroy")){$(this).remove()}else{$(this).removeAttr("role tabIndex "+"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")}}));this.tabs.each((function(){var li=$(this),prev=li.data("ui-tabs-aria-controls");if(prev){li.attr("aria-controls",prev).removeData("ui-tabs-aria-controls")}else{li.removeAttr("aria-controls")}}));this.panels.show();if(this.options.heightStyle!=="content"){this.panels.css("height","")}},enable:function(index){var disabled=this.options.disabled;if(disabled===false){return}if(index===undefined){disabled=false}else{index=this._getIndex(index);if(Array.isArray(disabled)){disabled=$.map(disabled,(function(num){return num!==index?num:null}))}else{disabled=$.map(this.tabs,(function(li,num){return num!==index?num:null}))}}this._setOptionDisabled(disabled)},disable:function(index){var disabled=this.options.disabled;if(disabled===true){return}if(index===undefined){disabled=true}else{index=this._getIndex(index);if($.inArray(index,disabled)!==-1){return}if(Array.isArray(disabled)){disabled=$.merge([index],disabled).sort()}else{disabled=[index]}}this._setOptionDisabled(disabled)},load:function(index,event){index=this._getIndex(index);var that=this,tab=this.tabs.eq(index),anchor=tab.find(".ui-tabs-anchor"),panel=this._getPanelForTab(tab),eventData={tab:tab,panel:panel},complete=function(jqXHR,status){if(status==="abort"){that.panels.stop(false,true)}that._removeClass(tab,"ui-tabs-loading");panel.removeAttr("aria-busy");if(jqXHR===that.xhr){delete that.xhr}};if(this._isLocal(anchor[0])){return}this.xhr=$.ajax(this._ajaxSettings(anchor,event,eventData));if(this.xhr&&this.xhr.statusText!=="canceled"){this._addClass(tab,"ui-tabs-loading");panel.attr("aria-busy","true");this.xhr.done((function(response,status,jqXHR){setTimeout((function(){panel.html(response);that._trigger("load",event,eventData);complete(jqXHR,status)}),1)})).fail((function(jqXHR,status){setTimeout((function(){complete(jqXHR,status)}),1)}))}},_ajaxSettings:function(anchor,event,eventData){var that=this;return{url:anchor.attr("href").replace(/#.*$/,""),beforeSend:function(jqXHR,settings){return that._trigger("beforeLoad",event,$.extend({jqXHR:jqXHR,ajaxSettings:settings},eventData))}}},_getPanelForTab:function(tab){var id=$(tab).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+id))}});if($.uiBackCompat!==false){$.widget("ui.tabs",$.ui.tabs,{_processTabs:function(){this._superApply(arguments);this._addClass(this.tabs,"ui-tab")}})}return $.ui.tabs}));"use strict";fluid.registerNamespace("fluid.colour");fluid.colour.hexIndirect={3:"001122",4:"00112233",6:"012345",8:"01234567"};fluid.colour.hexToArray=function(hex){if(hex.charAt(0)!=="#"){fluid.fail("hex colour must begin with # - "+hex)}hex=hex.substring(1);const digits=fluid.transform(hex.split(""),(function(ch){return parseInt(ch,16)}));const indirect=fluid.colour.hexIndirect[hex.length];if(!indirect){fluid.fail("Unsupported number of hex digits in "+hex+": can only supply "+Object.keys(fluid.colour.hexIndirect).join(", ")+" digits")}const array=[];for(let i=0;i<indirect.length;i+=2){const colour=(digits[indirect[i]]*16+digits[indirect[i+1]])/(i===6?255:1);array.push(colour)}return array};fluid.colour.arrayToString=function(array){return(array.length===3?"rgb(":"rgba(")+array.join(", ")+")"};fluid.colour.interpolate=function(f,c1,c2){return fluid.transform([(1-f)*c1[0]+f*c2[0],(1-f)*c1[1]+f*c2[1],(1-f)*c1[2]+f*c2[2]],Math.round)};fluid.colour.interpolateStops=function(stops,value){const binIndex=stops.findIndex((stop=>value<=stop[0]));const bin=stops[binIndex];if(binIndex===-1){return stops[stops.length-1][1]}else if(binIndex===0){return bin[1]}const lowerStop=stops[binIndex-1];const upperStop=bin;const t=(value-lowerStop[0])/(upperStop[0]-lowerStop[0]);const interpolatedColor=fluid.colour.interpolate(t,fluid.colour.hexToArray(lowerStop[1]),fluid.colour.hexToArray(upperStop[1]));return fluid.colour.arrayToString(interpolatedColor)};fluid.colour.memoStops=function(stops,steps){const colours=[];for(let i=0;i<=steps;++i){colours.push(fluid.colour.interpolateStops(stops,i/steps))}return colours};fluid.colour.lookupStop=function(steps,prop){const bin=Math.floor(prop*(steps.length-1));return steps[bin]};fluid.colour.average=function(ca){const sum=ca.reduce((function(total,c){total[0]+=c[0];total[1]+=c[1];total[2]+=c[2];return total}),[0,0,0]);return sum.map((function(e){return e/ca.length}))};fluid.colour.rgbToHsl=function(c){const r=c[0]/255,g=c[1]/255,b=c[2]/255;const max=Math.max(r,g,b),min=Math.min(r,g,b);let h,s,l=(max+min)/2;if(max===min){h=s=0}else{const d=max-min;s=l>.5?d/(2-max-min):d/(max+min);if(max===r){h=(g-b)/d+(g<b?6:0)}else if(max===g){h=(b-r)/d+2}else{h=(r-g)/d+4}h/=6}return[h,s,l]};fluid.colour.hue2rgb=function(p,q,t){if(t<0){t+=1}else if(t>1){t-=1}if(t<1/6){return p+(q-p)*6*t}else if(t<1/2){return q}else if(t<2/3){return p+(q-p)*(2/3-t)*6}else{return p}};fluid.colour.hslToRgb=function(hsl){const h=hsl[0],s=hsl[1],l=hsl[2];let r,g,b;if(s===0){r=g=b=l}else{const q=l<.5?l*(1+s):l+s-l*s;const p=2*l-q;r=fluid.colour.hue2rgb(p,q,h+1/3);g=fluid.colour.hue2rgb(p,q,h);b=fluid.colour.hue2rgb(p,q,h-1/3)}return[Math.round(r*255),Math.round(g*255),Math.round(b*255)]};"use strict";var hortis=fluid.registerNamespace("hortis");hortis.encodeHTML=function(str){return str.replace(/[&<>'"]/g,(function(tag){return{"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"}[tag]}))};hortis.renderSVGElement=function(markup,parentContainer){const container=$.parseXML(markup);const element=container.documentElement;parentContainer.append(element);return element};hortis.renderNumber=function(number){if(Math.abs(number)<1e-5){return"0"}else{return number.toFixed(3)}};hortis.emitPath=function(elements){let togo="";elements.forEach((function(elem){if(typeof elem==="string"){togo+=elem}else{togo+=hortis.renderNumber(elem)}}));return togo};hortis.circularPath=function(radius){const r=radius;return hortis.emitPath(["M",-r," ",0,"A",r," ",r," 0 1 0 ",r," ",0,"A",r," ",r," 0 1 0 ",-r," ",0])};hortis.annularPath=function(innerRadius,outerRadius){const ir=innerRadius,or=outerRadius;return hortis.emitPath(["M",-or," ",0,"A",or," ",or," 0 1 0 ",or," ",0,"A",or," ",or," 0 1 0 ",-or," ",0,"Z","M",-ir," ",0,"A",ir," ",ir," 0 1 1 ",ir," ",0,"A",ir," ",ir," 0 1 1 ",-ir," ",0,"Z"])};hortis.segmentPath=function(startAngle,endAngle,innerRadius,outerRadius){const cs=Math.cos(startAngle),ss=-Math.sin(startAngle),ce=Math.cos(endAngle),se=-Math.sin(endAngle),i=innerRadius,o=outerRadius,lfa=(+(endAngle-startAngle>=Math.PI)).toString();return hortis.emitPath(["M",cs*i," ",ss*i,"A",i," ",i," 0 ",lfa," 0 ",ce*i," ",se*i,"L",ce*o," ",se*o,"A",o," ",o," 0 ",lfa," 1 ",cs*o," ",ss*o,"Z"])};hortis.linearTextPath=function(leftAngle,rightAngle,innerRadius,outerRadius){const midAngle=(leftAngle+rightAngle)/2,c=Math.cos(midAngle),s=-Math.sin(midAngle),sr=c>0?innerRadius:outerRadius,fr=c>0?outerRadius:innerRadius;return hortis.emitPath(["M",c*sr," ",s*sr,"L",c*fr," ",s*fr])};hortis.segmentTextPath=function(startAngle,endAngle,outerRadius){const cs=Math.cos(startAngle),ss=-Math.sin(startAngle),ce=Math.cos(endAngle),se=-Math.sin(endAngle),ar=outerRadius-20,lfa=(+(endAngle-startAngle>=Math.PI)).toString();return hortis.emitPath(["M",cs*ar," ",ss*ar,"A",ar," ",ar," 0 ",lfa," 0 ",ce*ar," ",se*ar])};hortis.circularTextPath=function(outerRadius){const ar=outerRadius-20;return hortis.emitPath(["M","-0.1 ",-ar,"A",ar," ",ar," 0 1 0 ","0.1 ",-ar])};"use strict";var{signal:signal,effect:effect,computed:computed}=preactSignalsCore;fluid.coerceToPrimitive=function(string){return/^(true|false|null)$/.test(string)||/^[\[{0-9]/.test(string)&&!/^{\w/.test(string)?JSON.parse(string):string};fluid.processSignalArgs=function(args){let undefinedSignals=false;const designalArgs=[];for(const arg of args){if(arg instanceof preactSignalsCore.Signal){const value=arg.value;designalArgs.push(arg.value);if(value===undefined){undefinedSignals=true}}else{designalArgs.push(arg)}}return{designalArgs:designalArgs,undefinedSignals:undefinedSignals}};fluid.computed=function(func,...args){return computed((()=>{const{designalArgs:designalArgs,undefinedSignals:undefinedSignals}=fluid.processSignalArgs(args);return undefinedSignals?undefined:typeof func==="string"?fluid.invokeGlobalFunction(func,designalArgs):func.apply(null,designalArgs)}))};fluid.effect=function(func,...args){return effect((()=>{const{designalArgs:designalArgs,undefinedSignals:undefinedSignals}=fluid.processSignalArgs(args);if(!undefinedSignals){return typeof func==="string"?fluid.invokeGlobalFunction(func,designalArgs):func.apply(null,designalArgs)}}))};fluid.derefSignal=function(signal,path){return computed((()=>{const value=signal.value;return fluid.get(value,path)}))};fluid.validateContainer=function(container){if(!container||!container.jquery||container.length!==1){const selector=container?.selector;const count=container.length!==undefined?container.length:0;const extraMessages=container.selectorName?[" with selector name "+container.selectorName+" in context ",container.context]:[];fluid.fail((count>1?"More than one ("+count+") container elements were":"No container element was")+" found for selector "+selector,...extraMessages)}return container[0]};fluid.parseMarkup=function(template,hasRoot){const fragment=document.createRange().createContextualFragment(template);return hasRoot?fragment.firstElementChild:fragment};fluid.spliceContainer=function(target,source,elideParent){const children=elideParent?source.childNodes:[source];target.replaceChildren(...children);if(elideParent){target.classList.add(...source.classList)}};fluid.renderContainerSplice=function(parentContainer,elideParent,hasRoot,renderMarkup){const resolvedContainer=fluid.validateContainer(parentContainer);effect((()=>{const containerMarkup=renderMarkup();const template=fluid.parseMarkup(containerMarkup,true);fluid.spliceContainer(resolvedContainer,template,elideParent)}));return parentContainer};fluid.renderStringTemplate=function(markup,renderModelSignal){const renderModel=renderModelSignal.value;return renderModel===undefined?markup.fallbackContainer:fluid.stringTemplate(markup.container,renderModel)};fluid.defaults("fluid.stringTemplateRenderingView",{gradeNames:"fluid.containerRenderingView",markup:{fallbackContainer:"<div></div>"},invokers:{renderMarkup:"fluid.renderStringTemplate({that}.options.markup, {that}.renderModel)",renderContainer:"fluid.renderContainerSplice({that}.options.parentContainer, {that}.options.elideParent, {that}.options.hasRoot, {that}.renderMarkup)",addToParent:null},elideParent:true,hasRoot:true,members:{renderModel:"@expand:fluid.computed(fluid.blankRenderModel)"}});fluid.blankRenderModel=function(){const blankSignal=signal(true);return blankSignal.value};"use strict";var hortis=fluid.registerNamespace("hortis");var{effect:effect,computed:computed,batch:batch}=preactSignalsCore;fluid.defaults("hortis.bareResourceLoader",{gradeNames:"fluid.component",members:{completionPromise:"@expand:fluid.promise()"}});fluid.defaults("hortis.csvReader",{gradeNames:"hortis.bareResourceLoader",csvOptions:{header:true,skipEmptyLines:true},members:{rows:"@expand:signal()"},events:{},listeners:{"onCreate.parse":"hortis.csvReader.parse({that}, {that}.options.csvOptions, {that}.options.url)"}});Object.defineProperty(fluid,"log",{get:function(){return fluid.isLogging()?console.log.bind(window.console,fluid.renderTimestamp(new Date)+":  "):function(){}}});hortis.toggleClass=function(container,clazz,value,inverse){container.classList[value^inverse?"add":"remove"](clazz)};hortis.csvReader.parse=function(that,csvOptions,url){const options={...csvOptions,complete:function(results){that.parsed=results;that.data=results.data;that.headers=results.meta.fields;that.completionPromise.resolve(that.data);that.rows.value=that.data},error:function(err){that.completionPromise.reject();fluid.fail("Error parsing CSV file ",url,": ",err)}};Papa.parse(url,options)};fluid.defaults("hortis.urlCsvReader",{gradeNames:"hortis.csvReader",csvOptions:{download:true}});fluid.defaults("hortis.vizLoader",{gradeNames:["fluid.component"],components:{taxaLoader:{type:"hortis.urlCsvReader",options:{url:"{vizLoader}.options.taxaFile"}},obsLoader:{type:"hortis.urlCsvReader",options:{url:"{vizLoader}.options.obsFile"}},taxa:{type:"hortis.taxa",options:{members:{rows:"{vizLoader}.taxaRows"}}}},events:{onResourcesLoaded:null},members:{resourcesLoaded:"@expand:signal()",taxaRows:"@expand:signal()",obsRows:"@expand:signal()",filteredObs:"{that}.obsRows",finalFilteredObs:"@expand:fluid.computed({that}.filterObsByTaxa, {that}.filteredObs)"},invokers:{filterObs:fluid.identity,filterObsByTaxa:fluid.identity},listeners:{"onCreate.bindResources":"hortis.vizLoader.bindResources"}});hortis.vizLoader.bindResources=async function(that){const resourceLoaders=fluid.queryIoCSelector(that,"hortis.bareResourceLoader",true);const promises=resourceLoaders.map((resourceLoader=>resourceLoader.completionPromise));const[taxa,obs]=await Promise.all(promises);batch((()=>{that.taxaRows.value=taxa;that.obsRows.value=obs;that.resourcesLoaded.value=true;that.events.onResourcesLoaded.fire()}))};fluid.defaults("hortis.filter",{members:{filterInput:null,filterOutput:null},invokers:{}});fluid.defaults("hortis.filters",{listeners:{"onCreate.wireFilters":"hortis.wireObsFilters"},members:{allInput:"{vizLoader}.obsRows",allOutput:"@expand:signal()"}});hortis.wireObsFilters=function(that){const filterComps=fluid.queryIoCSelector(that,"hortis.filter",true);let prevOutput=that.allInput;filterComps.forEach((filterComp=>{filterComp.filterInput=prevOutput;filterComp.filterOutput=fluid.computed(filterComp.doFilter,filterComp.filterInput,filterComp.filterState);prevOutput=filterComp.filterOutput}));effect((()=>that.allOutput.value=prevOutput.value))};hortis.rowCheckbox=function(rowid){return`\n    <span class="pretty p-icon">\n      <input type="checkbox" class="checklist-check" ${rowid}/>\n      <span class="state p-success">\n        <i class="icon mdi mdi-check"></i>\n        <label></label>\n      </span>\n    </span>`};hortis.taxonTooltipTemplate=`<div class="imerss-tooltip">\n    <div class="imerss-photo" style="background-image: url(%imgUrl)"></div>\n    <div class="text"><b>%taxonRank:</b> %taxonNames</div>\n</div>`;hortis.capitalize=function(string){return string.charAt(0).toUpperCase()+string.slice(1)};hortis.renderTaxonTooltip=function(that,hoverId){const row=that.rowById.value[hoverId];const terms={imgUrl:row.iNaturalistTaxonImage||""};if(row.rank){terms.taxonRank=hortis.capitalize(row.rank)}else{terms.taxonRank="Species"}const names=[row.taxonName||row.iNaturalistTaxonName,row.commonName,row.hulqName].filter((name=>name));terms.taxonNames=names.join(" / ");return fluid.stringTemplate(hortis.taxonTooltipTemplate,terms)};hortis.isInDocument=function(node){const dokkument=fluid.getDocument(node),container=node[0];return $.contains(dokkument,container)||dokkument===container};hortis.clearAllTooltips=function(that){hortis.clearTooltip(that);$(".ui-tooltip").remove();that[that.options.tooltipKey].value=null};hortis.clearTooltip=function(that){const tooltipTarget=that.tooltipTarget;if(tooltipTarget){that.tooltipTarget=null;if(hortis.isInDocument(tooltipTarget)){tooltipTarget.tooltip("destroy")}else{hortis.clearAllTooltips(that)}}};hortis.updateTooltip=function(that,id){const content=id?that.renderTooltip(id):null;hortis.clearTooltip(that);if(content){const target=$(that.hoverEvent.target);target.tooltip({items:target});target.tooltip("option","content",content||"");target.tooltip("option","track",true);target.tooltip("open",that.hoverEvent);that.tooltipTarget=target}else{that.hoverEvent=null}};hortis.subscribeHover=function(that){const tooltipKey=that.options.tooltipKey;return effect((()=>{hortis.updateTooltip(that,that[tooltipKey].value)}))};fluid.defaults("hortis.withTooltip",{invokers:{renderTooltip:"fluid.notImplemented"},members:{subscribeHover:"@expand:hortis.subscribeHover({that})"}});fluid.defaults("hortis.checkbox",{gradeNames:"fluid.stringTemplateRenderingView",members:{value:"@expand:signal()",valueToDom:"@expand:fluid.effect(hortis.checkbox.valueToDom, {that}.value, {that}.dom.control.0)"},selectors:{control:"input"},elideParent:false,markup:{container:`\n        <span class="pretty p-icon">\n            <input type="checkbox" class="checklist-check"/>\n            <span class="state p-success">\n                <i class="icon mdi mdi-check"></i>\n                <label></label>\n            </span>\n        </span>`},listeners:{"onCreate.listenCheck":"hortis.checkbox.listenCheck"}});hortis.checkbox.valueToDom=function(value,node){const state=value?hortis.SELECTED:hortis.UNSELECTED;node.checked=state===hortis.SELECTED;node.indeterminate=state===hortis.INDETERMINATE;const holder=node.closest(".p-icon");const ui=holder.querySelector(".icon");$(ui).toggleClass("mdi-check",state!==hortis.INDETERMINATE)};hortis.checkbox.listenCheck=function(that){that.dom.locate("control").on("click",(function(){that.value.value=this.checked}))};hortis.closeParentTaxa=function(rowFocus,rowById){Object.keys(rowFocus).forEach((function(id){let row=rowById[id];while(row){rowFocus[row.id]=true;row=row.parent}}));return rowFocus};hortis.taxaFromObs=function(filteredObs,rowById){const taxonIds={};filteredObs.forEach((row=>{taxonIds[row["iNaturalist taxon ID"]]=true}));return hortis.closeParentTaxa(taxonIds,rowById)};hortis.bindTaxonHover=function(that,layoutHolder){const hoverable=that.options.selectors.hoverable;that.container.on("mouseenter",hoverable,(function(e){const id=this.dataset.rowId;layoutHolder.hoverEvent=e;layoutHolder.hoverId.value=id}));that.container.on("mouseleave",hoverable,(function(){layoutHolder.hoverId.value=null}));that.container.on("click",hoverable,(function(){const id=this.dataset.rowId;layoutHolder.events.taxonSelect.fire(id)}))};fluid.defaults("hortis.taxa",{gradeNames:"fluid.component",members:{rowByIdPre:"@expand:fluid.computed(hortis.indexTree, {that}.rows)",rowById:"@expand:fluid.computed(hortis.taxa.map, {that}.rows, {that}.rowByIdPre)",entries:"@expand:fluid.computed(hortis.computeEntries, {that}.rows, {that}.acceptRow)",entryById:"@expand:fluid.computed(hortis.indexEntries, {that}.entries)"},invokers:{acceptRow:"hortis.acceptRow({that}, {arguments}.0)"}});hortis.acceptRow=function(){return true};hortis.computeEntries=function(rows,acceptRow){const togo=[];fluid.each(rows,(function(row){if(acceptRow(row)){togo.push({row:row,children:hortis.computeEntries(row.children,acceptRow)})}else{const dChildren=hortis.computeEntries(row.children,acceptRow);Array.prototype.push.apply(togo,dChildren)}}));return hortis.sortChecklistLevel(togo)};hortis.indexEntries=function(entries){const index={};entries.forEach((function(entry){index[entry.row.id]=entry}));return index};hortis.indexTree=function(flatTree){const index={};flatTree.forEach((function(row){index[row.id]=row}));return index};hortis.taxa.map=function(rows,byId){rows.forEach(((row,i)=>{row.flatIndex=i;if(!row.children){row.children=[]}if(row.parentId){const parent=byId[row.parentId];row.parent=parent;fluid.pushArray(parent,"children",row)}}));const assignDepth=function(node,depth){node.depth=depth;node.children.forEach((child=>assignDepth(child,depth+1)))};if(rows.length>0){assignDepth(rows[0],0)}return byId};fluid.defaults("hortis.layoutHolder",{gradeNames:["fluid.modelComponent","hortis.withTooltip"],tooltipKey:"hoverId",events:{taxonSelect:null},members:{taxonHistory:"@expand:signal([])",historyIndex:"@expand:signal(0)",rootId:"@expand:signal({that}.options.rootId)",rowFocus:"@expand:signal({})",rowSelection:"@expand:signal({})",selectedId:"@expand:signal(null)",hoverId:"@expand:signal(null)"},modelRelay:{isAtRoot:{target:"isAtRoot",args:["{that}.model.layoutId","{that}.options.rootId"],func:(x,y)=>x===y}},invokers:{renderTooltip:"hortis.renderTaxonTooltip({that}, {arguments}.0)"}});fluid.defaults("hortis.vizLoaderWithMap",{gradeNames:["fluid.viewComponent","hortis.vizLoader"],selectors:{map:".imerss-map"},components:{map:{type:"hortis.libreMap",container:"{that}.dom.map",options:{gradeNames:"{vizLoader}.options.mapGrades"}}}});hortis.projectBounds={Galiano:[[48.855,-123.65],[49.005,-123.25]],Valdes:[[49,-123.798],[49.144,-123.504]],Xetthecum:[[48.93713,-123.511],[48.9511,-123.498]],Pepiowelh:[[48.565,-123.1575],[48.598,-123.1266]],HoweSound:[[49.16,-124.281],[50.17,-122.05]],SalishSea:[[47.568,-124.2],[49.134,-122.059]]};hortis.initBounds=function(){const bounds=[[90,180],[-90,-180]];return bounds};hortis.updateBounds=function(bounds,lat,long){bounds[0][0]=Math.min(bounds[0][0],lat);bounds[0][1]=Math.min(bounds[0][1],long);bounds[1][0]=Math.max(bounds[1][0],lat);bounds[1][1]=Math.max(bounds[1][1],long)};hortis.expandBounds=function(bounds,factor){const width=bounds[1][1]-bounds[0][1];const height=bounds[1][0]-bounds[0][0];const he=width*factor;const ve=height*factor;if(width<360){bounds[0][0]-=ve;bounds[0][1]-=he;bounds[1][0]+=ve;bounds[1][1]+=he}};fluid.defaults("hortis.libreMap",{gradeNames:"fluid.viewComponent",zoomDuration:1e3,mapOptions:{style:{version:8,layers:[],sources:{}}},members:{map:"@expand:hortis.libreMap.make({that}.container.0, {that}.options.mapOptions, {that}.mapLoaded)",mapLoaded:"@expand:signal()"}});fluid.defaults("hortis.libreMap.withTiles",{addTiles:"@expand:fluid.effect(hortis.libreMap.addTileLayers, {that}.map, {that}.options.tileSets, {that}.mapLoaded)"});hortis.libreMap.make=function(container,mapOptions,mapLoaded){const togo=new maplibregl.Map({container:container,...mapOptions});togo.on("load",(function(){console.log("Map loaded");mapLoaded.value=1}));return togo};fluid.defaults("hortis.libreMap.streetmapTiles",{tileSets:{baseMap:{tiles:["https://tile.openstreetmap.org/{z}/{x}/{y}.png"],attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',tileSize:256}}});fluid.defaults("hortis.libreMap.usEcoL3Tiles",{tileSets:{ecoL3:{tiles:["https://usda-nifa-b-team.github.io/b-team/tiles/us_eco_l3_tiles/{z}/{x}/{y}.png"],tileSize:512,maxzoom:8,paint:{"raster-opacity":.5}}}});hortis.libreMap.addTileLayers=function(map,tileSets){const tileKeys=Object.keys(tileSets);tileKeys.reverse().forEach((function(key){const tileSet=tileSets[key];const paint=tileSet.paint||{};map.addSource(key,{type:"raster",...fluid.censorKeys(tileSet,["paint"])});map.addLayer({id:key,type:"raster",source:key,paint:paint})}))};hortis.libreMap.viridisStops=[[0,"#440154"],[.2,"#414487"],[.4,"#2a788e"],[.6,"#22a884"],[.8,"#7ad151"],[1,"#fde725"]];hortis.libreMap.natureStops=[[0,"#ffffff"],[1,"#09326d"]];fluid.defaults("hortis.libreMap.withObsGrid",{fillStops:hortis.libreMap.viridisStops,fillOpacity:.7,outlineColour:"black",members:{gridBounds:"@expand:fluid.derefSignal({obsQuantiser}.grid, bounds)",updateObsGrid:"@expand:fluid.effect(hortis.libreMap.updateObsGrid, {that}, {obsQuantiser}, {obsQuantiser}.grid, {that}.mapLoaded)",fitBounds:"@expand:fluid.effect(hortis.libreMap.fitBounds, {that}, {that}.gridBounds, {that}.mapLoaded)"}});hortis.libreMap.rectFromCorner=function(lat,long,latres,longres){return[[long,lat],[long+longres,lat],[long+longres,lat+latres],[long,lat+latres],[long,lat]]};hortis.libreMap.obsGridFeature=function(map,obsQuantiser,grid){const buckets=grid.buckets,latres=obsQuantiser.latResolution.value,longres=obsQuantiser.longResolution.value;return{type:"FeatureCollection",features:Object.entries(buckets).map((function([key,bucket]){const[lat,long]=hortis.obsQuantiser.indexToCoord(key,latres,longres);return{type:"Feature",geometry:{type:"Polygon",coordinates:[hortis.libreMap.rectFromCorner(lat,long,latres,longres)]},properties:{obsprop:bucket.count/grid.maxCount}}}))}};hortis.libreMap.updateObsGrid=function(map,obsQuantiser,grid){const geojson=hortis.libreMap.obsGridFeature(map,obsQuantiser,grid);let source=map.map.getSource("obsgrid-source");if(source){source.setData(geojson)}else{map.map.addSource("obsgrid-source",{type:"geojson",data:geojson})}const layer=map.map.getLayer("obsgrid-layer");if(!layer){const layer={id:"obsgrid-layer",type:"fill",source:"obsgrid-source",paint:{"fill-color":{property:"obsprop",stops:map.options.fillStops},"fill-opacity":map.options.fillOpacity,"fill-outline-color":map.options.outlineColour}};map.map.addLayer(layer)}};hortis.libreMap.swapCoords=function(coords){return[coords[1],coords[0]]};hortis.libreMap.swapBounds=function(bounds){return bounds.map(hortis.libreMap.swapCoords)};hortis.libreMap.fitBounds=function(that,fitBounds){const swapped=hortis.libreMap.swapBounds(fitBounds);that.map.fitBounds(swapped,{duration:that.options.zoomDuration,essential:true})};hortis.WGS84a=6378137;hortis.WGS84b=6356752.3142;hortis.WGS84e2=(hortis.WGS84a*hortis.WGS84a-hortis.WGS84b*hortis.WGS84b)/(hortis.WGS84a*hortis.WGS84a);hortis.longitudeLength=function(latitude){const latrad=Math.PI*latitude/180;const sinrad=Math.sin(latrad);return Math.PI*hortis.WGS84a*Math.cos(latrad)/(180*Math.sqrt(1-hortis.WGS84e2*sinrad*sinrad))};hortis.latitudeLength=function(latitude){const latrad=Math.PI*latitude/180;const sinrad=Math.sin(latrad);return Math.PI*hortis.WGS84a*(1-hortis.WGS84e2)/(180*Math.pow(1-hortis.WGS84e2*sinrad*sinrad,1.5))};hortis.longToLat=function(lng,lat){const longLength=hortis.longitudeLength(lat);const latLength=hortis.latitudeLength(lat);return lng*longLength/latLength};fluid.registerNamespace("hortis.obsQuantiser");hortis.obsQuantiser.initGrid=function(){const grid={};grid.bounds=hortis.initBounds();grid.maxCount=0;grid.buckets={};return grid};hortis.gridBucket=()=>({count:0,byTaxonId:{}});hortis.indexObs=function(bucket,row,index){fluid.pushArray(bucket.byTaxonId,row.iNatTaxonId,index)};fluid.defaults("hortis.obsQuantiser",{gradeNames:"fluid.modelComponent",members:{newBucket:hortis.gridBucket,indexObs:hortis.indexObs,baseLatitude:"@expand:signal(37.5)",longResolution:"@expand:signal(0.005)",latResolution:"@expand:fluid.computed(hortis.longToLat, {that}.longResolution, {that}.baseLatitude)",maxBounds:"@expand:fluid.computed(hortis.obsBounds, {vizLoader}.obsRows)",grid:{expander:{funcName:"fluid.computed",args:["hortis.obsQuantiser.indexObs","{that}","{vizLoader}.finalFilteredObs","{that}.latResolution","{that}.longResolution"]}}}});hortis.obsQuantiser.indexToCoord=function(index,latres,longres){const coords=index.split("|");return[coords[0]*latres,coords[1]*longres]};hortis.obsQuantiser.coordToIndex=function(lat,long,latres,longres){const latq=Math.floor(lat/latres);const longq=Math.floor(long/longres);return latq+"|"+longq};hortis.obsBounds=function(rows){const bounds=hortis.initBounds();rows.forEach((function(row){hortis.updateBounds(bounds,row.decimalLatitude,row.decimalLongitude)}));return bounds};hortis.obsQuantiser.indexObs=function(that,rows,latRes,longRes){const grid=hortis.obsQuantiser.initGrid();const now=Date.now();rows.forEach((function(row,index){const coordIndex=hortis.obsQuantiser.coordToIndex(row.decimalLatitude,row.decimalLongitude,latRes,longRes);hortis.updateBounds(grid.bounds,row.decimalLatitude,row.decimalLongitude);let bucket=grid.buckets[coordIndex];if(!bucket){bucket=grid.buckets[coordIndex]=that.newBucket()}bucket.count++;grid.maxCount=Math.max(grid.maxCount,bucket.count);that.indexObs(bucket,row,index)}));if(rows.length===0){grid.bounds=[...that.maxBounds.value]}hortis.expandBounds(grid.bounds,.1);const delay=Date.now()-now;fluid.log("Gridded "+rows.length+" rows in "+delay+" ms: "+1e3*(delay/rows.length)+" us/row");return grid};fluid.defaults("hortis.libreObsMap",{gradeNames:["hortis.libreMap","hortis.libreMap.withObsGrid"],components:{obsQuantiser:{type:"hortis.obsQuantiser",options:{members:{longResolution:"@expand:signal(0.075)"}}}}});"use strict";var hortis=fluid.registerNamespace("hortis");fluid.defaults("hortis.autocomplete",{gradeNames:["fluid.newViewComponent"],listeners:{"onCreate.render":"hortis.autocomplete.render"},events:{onConfirm:null},maxSuggestions:20,invokers:{query:"hortis.autocomplete.emptyQuery",renderSuggestion:"fluid.identity",renderInputValue:"fluid.identity"},widgetOptions:{displayMenu:"overlay",confirmOnBlur:false}});hortis.autocomplete.emptyQuery=function(query,callback){callback("")};hortis.autocomplete.render=function(that){const widgetOptions=$.extend({element:that.container[0],id:that.options.id,source:that.query,templates:{suggestion:that.renderSuggestion,inputValue:that.renderInputValue},onConfirm:that.events.onConfirm.fire},that.options.widgetOptions);that.widget=accessibleAutocomplete(widgetOptions);$("input",that.container).attr("spellcheck",false)};"use strict";var hortis=fluid.registerNamespace("hortis");fluid.defaults("hortis.tabs",{gradeNames:["fluid.viewComponent"],tabOptions:{},tabIds:{},model:{selectedTab:null},listeners:{"onCreate.initTabs":{this:"{that}.container",method:"tabs",args:"{that}.options.tabOptions"},"onCreate.bindEvents":{funcName:"hortis.tabs.bindEvents"}}});hortis.tabs.findTab=function(that,tabId){return fluid.find(that.options.tabIds,(function(id,key){return id===tabId?key:undefined}))};hortis.tabs.bindEvents=function(that){that.container.on("tabsactivate",(function(event,ui){const tabId=ui.newTab.find("a").attr("href").substring(1);const tab=hortis.tabs.findTab(that,tabId);that.applier.change("selectedTab",tab)}));const initialIndex=Object.keys(that.options.tabIds).indexOf(that.model.selectedTab);if(initialIndex!==-1){that.container.tabs("option","active",initialIndex)}};"use strict";var hortis=fluid.registerNamespace("hortis");var{signal:signal,effect:effect}=preactSignalsCore;hortis.sppAnnotations=["agg.","aff.","s.lat.","cf","sp.nov.","var.","sp.","ssp.","spp.","complex"];hortis.annoteRegex=new RegExp("("+hortis.sppAnnotations.map((annot=>annot.replace(".","\\."))).join("|")+")","g");hortis.renderSpeciesName=function(name){return name.replace(hortis.annoteRegex,`<span class="checklist-annote">$1</span>`)};hortis.encodeHTML=function(str){return str.replace(/[&<>'"]/g,(function(tag){return{"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"}[tag]}))};hortis.rowToScientific=function(row){return row.taxonName||row.iNaturalistTaxonName};hortis.accessRowHulq=function(row){const togo={nativeName:row.hulquminumName,scientificName:hortis.rowToScientific(row),commonName:row.commonName};togo.featuredName=togo.nativeName||togo.commonName;return togo};hortis.checklistItem=function(accessRow,entry,selectedId,simple,selectable){const record=entry.row;const rowid=` data-row-id="${record.id}"`;const rank=record.rank&&!(simple&&record.taxonName)?record.rank:"species";const selectedClass=rank==="species"&&record.id===selectedId?" checklist-selected":"";const header=`<li class="checklist-rank-${rank}${selectedClass}">`;const accessed=accessRow(record);const render=rank==="species"?hortis.renderSpeciesName:fluid.identity;const names={};if(accessed.nativeName){names.nativeName=`<p ${rowid} class="checklist-hulq-name"><em>${accessed.nativeName}</em></p>`}if(accessed.scientificName){names.scientificName=`<p ${rowid} class="checklist-scientific-name">${render(hortis.encodeHTML(accessed.scientificName))}</p>`}if(accessed.commonName){names.commonName=`<p ${rowid} class="checklist-common-name">${accessed.commonName}</p>`}const name=Object.values(names).join(" - ");const subList=hortis.checklistList(accessRow,entry.children,selectedId,simple,selectable);const footer="</li>";const check=selectable?hortis.rowCheckbox(rowid):"";return header+check+name+subList+footer};hortis.checklistList=function(accessRow,entries,selectedId,simple,selectable){return entries.length?"<ul>"+entries.map((function(entry){return hortis.checklistItem(accessRow,entry,selectedId,simple,selectable)})).join("")+"</ul>":""};hortis.checklistRowForId=function(container,id){return container.find("[data-row-id="+id+"]").closest("li")};hortis.updateChecklistSelection=function(container,newSelectedId,oldSelectedId,rowById){if(newSelectedId===null){return}const oldSelected=hortis.checklistRowForId(container,oldSelectedId);oldSelected.removeClass("checklist-selected");const row=rowById[newSelectedId];if(row&&row.species){const newSelected=hortis.checklistRowForId(container,newSelectedId);newSelected.addClass("checklist-selected")}};hortis.alwaysRejectRanks=[];hortis.acceptChecklistRowAS=function(row,filterRanks,rowFocus){const acceptBasic=!filterRanks||filterRanks.includes(row.rank)||row.species;const alwaysReject=hortis.alwaysRejectRanks.includes(row.rank);const rejectSpecies=row.rank==="species"&&row.children.length>0;const acceptChecklist=row.taxonName;return rowFocus[row.id]&&(acceptBasic&&!rejectSpecies&&!alwaysReject||acceptChecklist)};hortis.acceptChecklistRowOBA=function(row,filterRanks,idToState,rowFocus){const acceptBasic=!filterRanks||filterRanks.includes(row.rank);const alwaysReject=hortis.alwaysRejectRanks.includes(row.rank);return rowFocus[row.id]&&acceptBasic&&!alwaysReject};hortis.scientificComparator=function(entrya,entryb){return hortis.rowToScientific(entrya.row)>hortis.rowToScientific(entryb.row)?1:-1};hortis.sortChecklistLevel=function(entries){return entries.sort(hortis.scientificComparator)};hortis.filterTaxonomy=function(rows,depth,acceptChecklistRow,filterTaxonomy,showRoot){const togo=[];fluid.each(rows,(function(row){if(acceptChecklistRow(row)||depth===0&&showRoot){togo.push({row:row,children:filterTaxonomy(row.children,depth+1)})}else{const dChildren=filterTaxonomy(row.children,depth+1);Array.prototype.push.apply(togo,dChildren)}}));return hortis.sortChecklistLevel(togo)};hortis.SELECTED=1;hortis.UNSELECTED=0;hortis.INDETERMINATE=-1;fluid.defaults("hortis.checklist",{gradeNames:["hortis.withPanelLabel","fluid.viewComponent"],filterRanks:false,showRoot:false,selectable:false,selectors:{hoverable:"p",checklist:".imerss-checklist"},invokers:{accessRow:{funcName:"hortis.accessRowHulq"},acceptChecklistRow:{funcName:"hortis.acceptChecklistRowAS",args:["{arguments}.0","{that}.options.filterRanks","{that}.rowFocus.value"]},filterTaxonomy:{funcName:"hortis.filterTaxonomy",args:["{arguments}.0","{arguments}.1","{that}.acceptChecklistRow","{that}.filterTaxonomy","{that}.options.showRoot"]},generateChecklist:{funcName:"hortis.checklist.generate",args:["{that}","{that}.dom.checklist","{layoutHolder}","{that}.filterTaxonomy","{that}.options.filterRanks","{arguments}.0"]},check:"hortis.checklist.check({that}, {arguments}.0, {arguments}.1)"},members:{idToState:"@expand:signal({})",oldIdToState:{},rowSelection:"@expand:fluid.computed(hortis.checklist.checksToSelection, {checklist}.idToState)",subscribeChecks:"@expand:hortis.checklist.subscribeChecks({that}.idToState, {that})",subscribeSelected:"@expand:hortis.checklist.subscribeSelected({that}, {that}.selectedId, {that}.rowById)",subscribeGenerate:"@expand:hortis.checklist.subscribeGenerate({that}, {that}.rootId, {that}.selectedId, {that}.rowFocus, {that}.rowById)"},listeners:{"onCreate.bindTaxonHover":"hortis.bindTaxonHover({that}, {layoutHolder})","onCreate.bindCheckboxClick":"hortis.checklist.bindCheckboxClick({that})"}});fluid.defaults("hortis.checklist.withOBA",{invokers:{acceptChecklistRow:{funcName:"hortis.acceptChecklistRowOBA",args:["{arguments}.0","{that}.options.filterRanks","{that}.oldIdToState","{that}.rowFocus.value"]}}});hortis.checklist.bindCheckboxClick=function(checklist){checklist.container.on("click",".pretty input",(function(){const id=this.dataset.rowId;fluid.log("Checkbox clicked with row "+id);checklist.check(id,this.checked)}))};hortis.checklist.subscribeChecks=function(idToStateSignal,checklist){let oldIdToState=undefined;return effect((()=>{const newIdToState=idToStateSignal.value;fluid.each(newIdToState,((newState,id)=>{const oldState=oldIdToState[id];if(newState!==oldState){hortis.checklist.stateToCheck(checklist,newState,id)}}));oldIdToState=newIdToState}))};hortis.checklist.subscribeSelected=function(that,selectedIdSignal,rowByIdSignal){let oldSelectedId=undefined;return fluid.effect((function(newSelectedId,rowById){hortis.updateChecklistSelection(that.container,newSelectedId,oldSelectedId,rowById);oldSelectedId=newSelectedId}),selectedIdSignal,rowByIdSignal)};hortis.checklist.subscribeGenerate=function(that,rootIdSignal,selectedIdSignal,rowFocusSignal,rowByIdSignal){return fluid.effect((function(rootId,selectedId,rowFocus,rowById){const model={rootId:rootId,selectedId:selectedId,rowFocus:rowFocus,rowById:rowById};that.generateChecklist(model)}),rootIdSignal,selectedIdSignal,rowFocusSignal,rowByIdSignal)};hortis.checklist.stateToCheck=function(checklist,state,id){const node=checklist.idToNode?.[id];if(node){node.checked=state===hortis.SELECTED;node.indeterminate=state===hortis.INDETERMINATE;const holder=node.closest(".p-icon");const ui=holder.querySelector(".icon");$(ui).toggleClass("mdi-check",state!==hortis.INDETERMINATE)}};hortis.checklist.generate=function(that,element,layoutHolder,filterTaxonomy,simple,model){const{rootId:rootId,selectedId:selectedId,rowFocus:rowFocus,rowById:rowById}=model;const selectable=that.options.selectable;fluid.log("Generating checklist for id "+rootId);that.oldIdToState=that.idToState.peek();const rootChildren=fluid.makeArray(rowById[rootId]);const filteredEntries=filterTaxonomy(rootChildren,0);that.rootEntry={row:{id:hortis.checklist.ROOT_ID},children:filteredEntries};if(selectable){const{idToEntry:idToEntry,idToState:idToState}=hortis.checklist.computeInitialModel(that.rootEntry,rowFocus,that.oldIdToState);that.idToEntry=idToEntry;that.idToState.value=idToState}const markup=hortis.checklistList(that.accessRow,filteredEntries,selectedId,simple,selectable);element[0].innerHTML=markup;if(selectable){const checks=element[0].querySelectorAll(".checklist-check");const idToNode={};checks.forEach((check=>idToNode[check.dataset.rowId]=check));that.idToNode=idToNode}};hortis.checklist.allChildrenState=function(idToState,entry,state){return entry.children.find((child=>idToState[child.row.id]!==state))===undefined};hortis.checklist.check=function(checklist,id,checked){const idToStateUp={...checklist.idToState.value};const upState=checked?hortis.SELECTED:hortis.UNSELECTED;const entry=checklist.idToEntry[id];const setChildState=function(entry,state){idToStateUp[entry.row.id]=state;entry.children.forEach((child=>setChildState(child,state)))};setChildState(entry,upState);let parent=entry.parent;while(parent){const allChildrenState=hortis.checklist.allChildrenState(idToStateUp,parent,upState);idToStateUp[parent.row.id]=allChildrenState?upState:hortis.INDETERMINATE;parent=parent.parent}checklist.idToState.value=idToStateUp};hortis.checklist.ROOT_ID=Number.NEGATIVE_INFINITY;hortis.checklist.computeInitialModel=function(rootEntry,rowFocus,oldIdToState){const idToState={},idToEntry={};const indexEntry=function(entry,parent){const id=entry.row.id;if(!id){fluid.log("Warning, discarding row ",entry.row," without id set")}else if(rowFocus[id]){idToState[id]=oldIdToState[id]||hortis.UNSELECTED;idToEntry[id]=entry}entry.parent=parent;entry.children.forEach((childEntry=>indexEntry(childEntry,entry)))};indexEntry(rootEntry);return{idToEntry:idToEntry,idToState:idToState}};fluid.defaults("hortis.checklist.withHolder",{gradeNames:["hortis.layoutHolder","hortis.checklist"]});hortis.checklist.checksToSelection=function(idToState){const selection={};const selectAll={};let selected=0;fluid.each(idToState,((state,key)=>{if(state===hortis.SELECTED){++selected;selection[key]=true}selectAll[key]=true}));return selected===0?selectAll:selection};"use strict";var hortis=fluid.registerNamespace("hortis");hortis.taxonDisplayLookup={iNaturalistTaxonName:"Taxon Name:",observationCount:"Observation Count:",iNaturalistObsLink:"Observation:",taxonLink:"iNaturalist Taxon:",commonName:"&#xfeff;",reportingStatus:"Status:",hulqName:"Hul'qumi'num name:",wikipediaSummary:"Wikipedia Summary",media:"Media",observationData:"Observation Data",iNaturalistTaxonImage:"iNaturalist Taxon Image:",phyloPic:"Taxon Icon:",taxonPic:"Taxon Picture:",taxonPicDescription:"Taxon Picture Description:"};hortis.friendlyDisplayLookup={...hortis.taxonDisplayLookup,iNaturalistTaxonName:"Species:"};hortis.commonFields=["commonName","wikipediaSummary"];hortis.dumpRow=function(key,value,markup,extraClazz,valueClazz,options){if(value){const toLook=options?.friendlyNames?hortis.friendlyDisplayLookup:hortis.taxonDisplayLookup;const keyName=key?toLook[key]||hortis.capitalize(key):"";valueClazz=valueClazz||"";const openPanel=options?.openTaxonPanels[key];const isRemainder=extraClazz&&extraClazz.includes("taxonDisplay-expandable-remainder");const clazz="taxonDisplay-row "+(extraClazz||"")+(openPanel?" taxonDisplay-expanded":" taxonDisplay-unexpanded");return fluid.stringTemplate(markup.taxonDisplayRow,{key:isRemainder?"":keyName,value:value,rootAttrs:'class="'+clazz+'"',valueClazz:valueClazz})}else{return""}};hortis.renderDate=function(date){return new Date(date).toISOString().substring(0,10)};hortis.expandButtonMarkup='<span class="taxonDisplay-expand"></span>';hortis.expandableBlock='<div class="%blockClazz taxonDisplay-expandable-header taxonDisplay-runon-header %state">%blockName'+hortis.expandButtonMarkup+"</div>"+'<div class="taxonDisplay-expandable-remainder taxonDisplay-runon-remainder %state">%block</div>';hortis.sourceTable={iNat:"iNaturalist",PMLS:"Pacific Marine Life Surveys",RBCM:"Royal British Columbia Museum",CMN:"Canadian Museum of Nature",BCCSN:"British Columbia Cetacean Sightings Network","Gal-Salm":"Erickson",CHU2010:"Chu and Leys (2010)",CHU2012:"Chu and Leys (2012)",Hunterston:"Hunterston Farms BioBlitz 2010"};hortis.sourceFromId=function(obsId){const colpos=obsId?obsId.indexOf(":"):-1;return colpos===-1?null:obsId.substring(0,colpos)};hortis.datasetIdFromObs=function(obsId){const colpos=obsId.indexOf(":");return obsId.substring(0,colpos)};hortis.localIdFromObs=function(obsId){const colpos=obsId.indexOf(":");return obsId.substring(colpos+1)};hortis.renderObsId=function(obsId){const dataset=hortis.datasetIdFromObs(obsId);if(dataset==="iNat"){const localId=hortis.localIdFromObs(obsId);return fluid.stringTemplate(' (<a target="_blank" href="https://www.inaturalist.org/observations/%obsId">%obsId</a>)',{obsId:localId})}else{return obsId}};hortis.renderObsBound=function(row,prefix,markup,options){const date=row[prefix+"Timestamp"];if(date){const capPrefix=prefix==="since"?"":hortis.capitalize(prefix);const recordedBy=row[prefix+"RecordedBy"];const catalogueNumber=row[prefix+"CatalogueNumber"];const value=hortis.renderDate(row[prefix+"Timestamp"])+(recordedBy&&!options.suppressObsAuthors?" by "+recordedBy:"");const row1=hortis.dumpRow(capPrefix+(prefix==="since"?"First Observed:":" Reported:"),value,markup);const obsId=row[prefix+"ObservationId"];const collection=row[prefix+"Collection"];const institutionCode=row[prefix+"InstitutionCode"];const obsIdCollection=hortis.sourceFromId(row[prefix+"ObservationId"]);const renderedCollection=institutionCode||hortis.sourceTable[obsIdCollection||collection]||collection;let source=renderedCollection+(catalogueNumber&&institutionCode!=="iNaturalist"?" ("+catalogueNumber+")":"");if(obsId&&obsIdCollection==="iNat"){source+=hortis.renderObsId(obsId)}if(catalogueNumber&&institutionCode==="iNaturalist"){source+=hortis.renderObsId("iNat:"+catalogueNumber)}const row2=hortis.dumpRow("Source:",source,markup);return row1+row2}else{return""}};hortis.mediaBlock='<div class="imerss-media-name">%mediaName</div>'+'<div class="imerss-media-image"><a href="%mediaTarget"><img src="%mediaImage"/></a></div>'+'<div class="imerss-media-text">%mediaText</div>';hortis.renderOneMedium=function(medium){return fluid.stringTemplate(hortis.mediaBlock,{mediaName:medium.Name,mediaTarget:medium.URL,mediaImage:medium.Thumbnail,mediaText:medium.Description})};hortis.renderExpandable=function(terms,expanded){const allTerms={...terms,state:expanded?"taxonDisplay-expanded":"taxonDisplay-unexpanded"};return fluid.stringTemplate(hortis.expandableBlock,allTerms)};hortis.renderMedia=function(media){const mediaBlocks=media.map((oneMedium=>hortis.renderOneMedium(oneMedium)));return mediaBlocks.join("\n")};hortis.hulqValues=["Food","Medicinal","Spiritual","Material","Trade","Indicator"];hortis.hulqValueItem=`\n<div class="imerss-cultural-value">\n    <div role="img" class="imerss-value-%img imerss-cultural-value-img"></div>\n    <div class="imerss-cultural-value-text">%label</div>\n</div>`;hortis.hulqValueBlock=`<div class="imerss-cultural-values">%valueBlocks</div>`;hortis.drivePlayer=`<iframe frameborder="0" width="360" height="55" src="%url"></iframe>`;hortis.audioPlayer=`<audio controls><source src="%url" type="audio/mpeg"></audio>`;hortis.driveToPreview=function(url){const lastSlash=url.lastIndexOf("/");return url.substring(0,lastSlash)+"/preview"};hortis.renderAudioLink=function(audioLink){return audioLink?fluid.stringTemplate(hortis.audioPlayer,{url:audioLink}):""};hortis.dumpHulqName=function(row,hulqName,markup){const player=hortis.renderAudioLink(row.audioLink);const nameRow=hortis.dumpRow("hulqName",`<div>${hulqName}</div>`+player,markup);return nameRow};hortis.dumpHulqValues=function(row,markup){const valueBlocks=hortis.hulqValues.map((function(value){return row[value.toLowerCase()+"Value"]==="1"?value:"missing"})).map((function(img,index){return img==="missing"?"":fluid.stringTemplate(hortis.hulqValueItem,{img:img.toLowerCase(),label:hortis.hulqValues[index]})}));const valueBlock=fluid.stringTemplate(hortis.hulqValueBlock,{valueBlocks:valueBlocks.join("\n")});const valueRow1=hortis.dumpRow("Cultural values"," ",markup,"taxonDisplay-empty-header");const valueRow2=hortis.dumpRow("",valueBlock,markup,"taxonDisplay-empty-row");return valueRow1+valueRow2};hortis.iNatExtern=`<a href="%iNatLink" target="_blank" class="taxonDisplay-iNat-extern">iNaturalist<span class="external-link"></span></a>`;hortis.imageTemplate=`\n    <div class="taxonDisplay-image-holder">\n        <div class="imerss-photo" style="background-image: url(%imgUrl)"/>\n        %iNatExtern\n        </div>\n        <div class="imerss-photo-caption">\n        %photoCaption\n        </div>\n    </div>`;hortis.idToTaxonLink=function(taxonId){return"https://www.inaturalist.org/taxa/"+taxonId};hortis.renderTaxonDisplay=function(row,accessRow,markup,options){if(!row){return null}let togo=markup.taxonDisplayHeader;const dumpRow=function(keyName,value,extraClazz,options){if(keyName==="wikipediaSummary"&&value){const row1=hortis.dumpRow("Wikipedia Summary",hortis.expandButtonMarkup,markup,"taxonDisplay-expandable-header taxonDisplay-unexpanded taxonDisplay-runon-header");const row2=hortis.dumpRow("",value,markup,"taxonDisplay-expandable-remainder taxonDisplay-unexpanded taxonDisplay-runon-remainder","taxonDisplay-wikipediaSummary");togo+=row1+row2}else{togo+=hortis.dumpRow(keyName,value,markup,extraClazz,undefined,options)}};const dumpImage=function(keyName,url,taxonId,photoCaption){const imageMarkup=fluid.stringTemplate(markup.imageTemplate,{imgUrl:url,photoCaption:photoCaption,iNatExtern:taxonId?fluid.stringTemplate(hortis.iNatExtern,{iNatLink:hortis.idToTaxonLink(taxonId)}):""});togo+=imageMarkup};const dumpPhyloPic=function(keyName,url){togo+=hortis.dumpRow(keyName,`<div><img alt="Taxon photo" height="150" width="150" class="imerss-photo" src="${url}"></div>`,markup)};const photoCaption=`<div>${accessRow.featuredName}</div>`+hortis.renderAudioLink(row.audioLink);if(!row.taxonName){if(row.iNaturalistTaxonImage&&!row.taxonPic){dumpImage("iNaturalistTaxonImage",row.iNaturalistTaxonImage,row.id,photoCaption)}else if(row.taxonPic){dumpImage("taxonPic",row.taxonPic)}if(row.phyloPicUrl){dumpPhyloPic("phyloPic",row.phyloPicUrl)}dumpRow(row.rank,accessRow.scientificName,"taxonDisplay-rank");hortis.commonFields.forEach((function(field){dumpRow(field,row[field])}));dumpRow("taxonPicDescription",row.taxonPicDescription);dumpRow("Species:",row.childCount);dumpRow("observationCount",row.observationCount)}else{if(row.iNaturalistTaxonImage&&!row.obsPhotoLink){dumpImage("iNaturalistTaxonImage",row.iNaturalistTaxonImage,row.id,photoCaption)}if(row.species){dumpRow("iNaturalistTaxonName",(row.taxonName||row.iNaturalistTaxonName)+(row.authority?" "+row.authority:""),"taxonDisplay-rank",options)}if(accessRow.commonName!==accessRow.featuredName){dumpRow("commonName",row.commonName&&hortis.capitalize(row.commonName))}if(accessRow.nativeName&&options.culturalValues){togo+=hortis.dumpHulqValues(row,markup)}if(row.media){const mediaPanel=hortis.renderMedia(row.media,"");togo+=hortis.dumpRow("media",hortis.expandButtonMarkup,markup,"taxonDisplay-expandable-header",null,options);togo+=hortis.dumpRow("media",mediaPanel,markup,"taxonDisplay-expandable-remainder taxonDisplay-runon-remainder",null,options)}dumpRow("wikipediaSummary",row.wikipediaSummary);let obsPanel="";obsPanel+=hortis.dumpRow("reportingStatus",row.reportingStatus&&hortis.capitalize(row.reportingStatus),markup);obsPanel+=hortis.renderObsBound(row,"first",markup,options);obsPanel+=hortis.renderObsBound(row,"last",markup,options);obsPanel+=hortis.renderObsBound(row,"since",markup,options);if(row.iNaturalistObsLink){obsPanel+=hortis.dumpRow("iNaturalistObsLink",`<a href=${row.iNaturalistObsLink}">${row.iNaturalistObsLink}</a>`,markup)}obsPanel+=hortis.dumpRow("observationCount",row.observationCount,markup);togo+=hortis.dumpRow("observationData",hortis.expandButtonMarkup,markup,"taxonDisplay-expandable-header",null,options);togo+=hortis.dumpRow("observationData",obsPanel,markup,"taxonDisplay-expandable-remainder taxonDisplay-runon-remainder",null,options);if(row.obsPhotoLink){dumpImage("Observation photo",row.obsPhotoLink)}}togo+=markup.taxonDisplayFooter;return togo};hortis.bindRowExpander=function(that){that.container.on("click",".taxonDisplay-expand",(function(e){const target=$(e.target);const header=target.closest(".taxonDisplay-expandable-header");header.toggleClass("taxonDisplay-expanded");header.toggleClass("taxonDisplay-unexpanded");const showing=header.hasClass("taxonDisplay-expanded");const siblings=header.parent().children();const ownIndex=header.index();const next=$(siblings[ownIndex+1]);if(next.hasClass("taxonDisplay-expandable-remainder")){next.toggleClass("taxonDisplay-expanded",showing);next.toggleClass("taxonDisplay-unexpanded",!showing)}}))};hortis.updateTaxonDisplay=function(that,taxonRow){const content=taxonRow?hortis.renderTaxonDisplay(taxonRow,that.accessRow(taxonRow),that.options.markup,that.options):null;const taxonDisplay=that.container[0];taxonDisplay.innerHTML=content||""};fluid.defaults("hortis.taxonDisplay",{gradeNames:"fluid.viewComponent",listeners:{"onCreate.bindRowExpander":{funcName:"hortis.bindRowExpander",args:["{that}"]}},invokers:{accessRow:{funcName:"hortis.accessRowHulq"}},markup:{taxonDisplayHeader:"",taxonDisplayRow:'<div %rootAttrs><span class="taxonDisplay-key">%key</span><span class="taxonDisplay-value %valueClazz">%value</span></div>',taxonDisplayFooter:"",imageTemplate:hortis.imageTemplate},members:{selectedTaxonId:"@expand:signal()",obsRows:"@expand:signal()",taxaById:"@expand:signal()",obsForTaxonId:"@expand:fluid.computed(hortis.obsForTaxon, {that}.obsRows, {that}.selectedTaxonId)",taxonRow:"@expand:fluid.computed(hortis.computeTaxonDisplayRow, {that}.obsForTaxonId, {that}.taxaById, {that}.selectedTaxonId)",updateDisplay:"@expand:fluid.effect(hortis.updateTaxonDisplay, {that}, {that}.taxonRow)"},openTaxonPanels:{observationData:true,media:true}});hortis.byField=function(fieldName){return(a,b)=>a[fieldName]>b[fieldName]?1:-1};hortis.obsForTaxon=function(obsRows,taxonId){return obsRows.filter((row=>row["iNaturalist taxon ID"]===taxonId)).sort(hortis.byField("Date observed"))};hortis.obsToSummaryFields={RecordedBy:"Recorded by",ObservationId:"observationId",Timestamp:"Date observed"};hortis.computeTaxonDisplayRow=function(taxonObs,taxaById,taxonId){if(taxonId){const togo=Object.assign({},taxaById[taxonId]);const obsToFields=function(target,prefix,row){Object.entries(hortis.obsToSummaryFields).forEach((([key,value])=>{target[prefix+key]=row[value]}))};if(taxonObs.length>0){obsToFields(togo,"first",taxonObs[0]);obsToFields(togo,"last",fluid.peek(taxonObs))}return togo}else{return null}};
//# sourceMappingURL=imerss-viz-new.js.map