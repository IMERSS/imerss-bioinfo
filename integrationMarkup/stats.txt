<div id='dashboard'>
</div>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
<style>
  .bar-freq {
    font-size: normal;
  }
</style>
<script>
function dashboard(id, fData){
 var barColor = 'steelblue';
 function segColor(c){ return {und:"#807dba", doc:"#e08214",new:"#41ab5d"}[c]; }
 
 // compute total for each state.
 fData.forEach(function(d){d.total=d.freq.und+d.freq.doc+d.freq.new;});
 
 // function to handle histogram.
 function histoGram(fD){
 var hG={}, hGDim = {t: 30, r: 0, b: 95, l: 0};
 hGDim.w = 800 - hGDim.l - hGDim.r, 
 hGDim.h = 300 - hGDim.t - hGDim.b;
 
 //create svg for histogram.
 var hGsvg = d3.select(id).append("svg")
 .attr("width", hGDim.w + hGDim.l + hGDim.r)
 .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
 .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

 // create function for x-axis mapping.
 var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
 .domain(fD.map(function(d) { return d[0]; }));

 // Add x-axis to the histogram svg.
 var xAxis = hGsvg.append("g").attr("class", "x axis")
 .attr("transform", "translate(0," + hGDim.h + ")")
 .call(d3.svg.axis().scale(x).orient("bottom"));
 
 xAxis.selectAll('text').attr('transform', "rotate(-45)").attr('x', -30).attr('y', 15);

 // Create function for y-axis map.
 var y = d3.scale.linear().range([hGDim.h, 0])
 .domain([0, 20 + d3.max(fD, function(d) { return d[1]; })]);

 // Create bars for histogram to contain rectangles and freq labels.
 var bars = hGsvg.selectAll(".bar").data(fD).enter()
 .append("g").attr("class", "bar");
 
 //create the rectangles.
 bars.append("rect")
 .attr("x", function(d) { return x(d[0]); })
 .attr("y", function(d) { return y(d[1]); })
 .attr("width", x.rangeBand())
 .attr("height", function(d) { return hGDim.h - y(d[1]); })
 .attr('fill',barColor)
 .on("mouseover",mouseover)// mouseover is defined below.
 .on("mouseout",mouseout);// mouseout is defined below.
 
 //Create the frequency labels above the rectangles.
 bars.append("text").text(function(d){ return d3.format(",")(d[1])})
 .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
 .attr("y", function(d) { return y(d[1])-5; })
 .attr("text-anchor", "middle").attr("class", "bar-freq");
 
 function mouseover(d){ // utility function to be called on mouseover.
 // filter for selected state.
 var st = fData.filter(function(s){ return s.State == d[0];})[0],
 nD = d3.keys(st.freq).map(function(s){ return {type:s, freq:st.freq[s]};});
 
 // call update functions of pie-chart and legend. 
 pC.update(nD);
 leg.update(nD);
 }
 
 function mouseout(d){ // utility function to be called on mouseout.
 // reset the pie-chart and legend. 
 pC.update(tF);
 leg.update(tF);
 }
 
 // create function to update the bars. This will be used by pie-chart.
 hG.update = function(nD, color){
 // update the domain of the y-axis map to reflect change in frequencies.
 y.domain([0, d3.max(nD, function(d) { return d[1]; })]);
 
 // Attach the new data to the bars.
 var bars = hGsvg.selectAll(".bar").data(nD);
 
 // transition the height and color of rectangles.
 bars.select("rect").transition().duration(500)
 .attr("y", function(d) {return y(d[1]); })
 .attr("height", function(d) { return hGDim.h - y(d[1]); })
 .attr("fill", color);

 // transition the frequency labels location and change value.
 bars.select("text").transition().duration(500)
 .text(function(d){ return d3.format(",")(d[1])})
 .attr("y", function(d) {return y(d[1])-5; }); 
 } 
 return hG;
 }
 
 // function to handle pieChart.
 function pieChart(pD){
 var pC ={}, pieDim ={w:250, h: 250};
 pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;
 
 // create svg for pie chart.
 var piesvg = d3.select(id).append("svg")
 .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
 .attr("transform", "translate("+pieDim.w/2+","+pieDim.h/2+")");
 
 // create function to draw the arcs of the pie slices.
 var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

 // create a function to compute the pie slice angles.
 var pie = d3.layout.pie().sort(null).value(function(d) { return d.freq; });

 // Draw the pie slices.
 piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
 .each(function(d) { this._current = d; })
 .style("fill", function(d) { return segColor(d.data.type); })
 .on("mouseover",mouseover).on("mouseout",mouseout);

 // create function to update pie-chart. This will be used by histogram.
 pC.update = function(nD){
 piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
 .attrTween("d", arcTween);
 } 
 // Utility function to be called on mouseover a pie slice.
 function mouseover(d){
 // call the update function of histogram with new data.
 hG.update(fData.map(function(v){ 
 return [v.State,v.freq[d.data.type]];}),segColor(d.data.type));
 }
 //Utility function to be called on mouseout a pie slice.
 function mouseout(d){
 // call the update function of histogram with all data.
 hG.update(fData.map(function(v){
 return [v.State,v.total];}), barColor);
 }
 // Animating the pie-slice requiring a custom function which specifies
 // how the intermediate paths should be drawn.
 function arcTween(a) {
 var i = d3.interpolate(this._current, a);
 this._current = i(0);
 return function(t) { return arc(i(t)); };
 } 
 return pC;
 }
 
 // function to handle legend.
 function legend(lD){
 var leg = {};
 
 // create table for legend.
 var legend = d3.select(id).append("table").attr('class','legend');
 
 // create one row per segment.
 var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");
 
 // create the first column for each segment.
 tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
 .attr("width", '16').attr("height", '16')
 .attr("fill",function(d){ return segColor(d.type); });
 
var rowNames = {
 und: "unobserved",
 doc: "observed",
 new: "new"
};
 
 // create the second column for each segment.
 tr.append("td").text(function(d){ return rowNames[d.type];});

 // create the third column for each segment.
 tr.append("td").attr("class",'legendFreq')
 .text(function(d){ return d3.format(",")(d.freq);});

 // create the fourth column for each segment.
 tr.append("td").attr("class",'legendPerc')
 .text(function(d){ return getLegend(d,lD);});

 // Utility function to be used to update the legend.
 leg.update = function(nD){
 // update the data attached to the row elements.
 var l = legend.select("tbody").selectAll("tr").data(nD);

 // update the frequencies.
 l.select(".legendFreq").text(function(d){ return d3.format(",")(d.freq);});

 // update the percentage column.
 l.select(".legendPerc").text(function(d){ return getLegend(d,nD);}); 
 }
 
 function getLegend(d,aD){ // Utility function to compute percentage.
 return d3.format("%")(d.freq/d3.sum(aD.map(function(v){ return v.freq; })));
 }

 return leg;
 }
 
 // calculate total frequency by segment for all state.
 var tF = ['und','doc','new'].map(function(d){ 
 return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))}; 
 }); 
 
 // calculate total frequency by state for all segment.
 var sF = fData.map(function(d){return [d.State,d.total];});

 var hG = histoGram(sF), // create the histogram.
 pC = pieChart(tF), // create the pie-chart.
 leg= legend(tF); // create the legend.
}
</script>

<script>
var freqData=[
{State:'ALGAE',freq:{und:53, doc:31, new:115}}
,{State:'PLANTS',freq:{und:212, doc:518, new:152}}
,{State:'FUNGI',freq:{und:287, doc:126, new:49}}
,{State:'LICHENS',freq:{und:77, doc:96, new:77}}
,{State:'PROTOZOA',freq:{und:5, doc:2, new:20}}
,{State:'MARINE',freq:{und:109, doc:22, new:7}}
,{State:'JELLIES',freq:{und:55, doc:19, new:8}}
,{State:'MOLLUSKS',freq:{und:111, doc:61, new:32}}
,{State:'ARTHROPODS',freq:{und:435, doc:167, new:494}}
,{State:'ECHINODERMS',freq:{und:21, doc:19, new:0}}
,{State:'FISH',freq:{und:37, doc:35, new:7}}
,{State:'HERPTILES',freq:{und:1, doc:5, new:6}}
,{State:'BIRDS',freq:{und:50, doc:131, new:2}}
,{State:'MAMMALS',freq:{und:1, doc:12, new:21}}
,{State:'THINGS',freq:{und:5, doc:12, new:55}}
];

// dashboard('#dashboard',freqData);
Papa.parse("https://raw.githubusercontent.com/IMERSS/imerss-bioinfo/main/data/Galiano/Biodiversity_Galiano_Island_2021_summary_statistics.csv", {
  download: true,
  header: true,
  skipEmptyLines: true,
  complete: function(results) {
   console.log("Got data length ", results.data.length);
   var fData = results.data.slice(0, -1).map(function (row){
     return {
       State: row.Taxon,
       freq: {
         und: +row.Reported,
         doc: +row.Confirmed,
         new: +row.New
       }
     };
   });
    // console.log(JSON.stringify(fData, null, 2));
    dashboard('#dashboard', fData);
  },
  error: function (error) {
   console.log(error);
  }
});
</script>